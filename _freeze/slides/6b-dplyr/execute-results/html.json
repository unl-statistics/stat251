{
  "hash": "2ecc147174eaf154042c584cadcc9c5f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Computing with data\nauthor: Stat 251\ncategories:\n- slides\n- Week06\nengine: knitr\nformat:\n  revealjs:\n    navigation-mode: vertical\n    logo: N.svg\n    theme: inverse.scss\n    includes:\n      in_header: header.html\ndate: '2025-02-27'\n---\n\n\n\n# Where we are\n\nPlan for Thursdays: \n\n  - if there are questions on the current homework assignment, work on that, \n  - start on the new assignment\n\nAre there more questions for the Graphics homework? \n\n# \n\n... next chapter\n\n\n# Computing with data\n\n- data is the central object: \n\n    what is `data`?\n\n- every action we do, takes a data set as an argument and returns a (modified) data set\n\n```\ndata in -> action -> data out\n```\n\n# ... then ...\n\n- the pipe (in R): \n\npipe operator `%>%` or `|>` let's us string these actions together\n\n```\ndata_in %>% action1 %>% action2 %>% action3 -> data_out\n```\n\n- the parenthesis `(` dot approach `.` `)` (in python)\n\n```\ndata_out = ( data_in.action1.action2.action3.\n  action4 ) \n```\n\n\nRead as 'then'\n\n# Data Actions\n\nsmall number of actions that work together (think old-timey LEGO, not play mobile)\n\n  - get a subset of the rows \n  - get a subset of the columns \n  - transform/add variables\n  - calculate numeric summaries\n    \n  - introduce special groupings\n\n\n# Data Actions (in R)\n\nsmall number of actions that work together (think old-timey LEGO, not play mobile)\n\n  - get a subset of the rows: `filter`\n  - get a subset of the columns: `select` \n  - transform/add variables: `mutate`\n  - calculate numeric summaries: `summarize`\n    \n  - introduce special groupings: `group_by`\n    \n[posit cheat sheet](https://github.com/rstudio/cheatsheets/blob/main/data-transformation.pdf)\n\n# Data Actions (in python)\n\nsmall number of actions that work together (think old-timey LEGO, not play mobile)\n\n  - get a subset of the rows: `query` \n  - get a subset of the columns: select by name or index\n  - transform/add variables: `assign`\n  - calculate numeric summaries: `describe`\n    \n  - introduce special groupings: `groupby` (and `agg` or `expanding`)\n    \n[pandas cheat sheet](https://pandas.pydata.org/Pandas_Cheat_Sheet.pdf)\n\n# Grouping\n\nGrouping acts as a multiplier for each of the other actions\n\nGrouping by (usually categorical) variable(s) allows us to apply all of the other actions more specifically to each (combination of the) level(s) of variable(s) \n\n \n\nExample (`summarize`):\n\nsummary across a whole dataset\n\n    find the average height \n\nbecomes group specific\n\n    find the average height for men and women (group by gender)\n    find the average height by sport  (group by athletic discipline)\n    find the average height by sport and sex\n    \n\n# Grouping\n\nGrouping by (usually categorical) variable(s) is syntactic glue that allows us to apply all of the other actions more specifically\n\n  \n  \n\nExample (`filter`):\n\nfilter across a whole dataset\n\n    find the top earner\n\nbecomes group specific\n\n    find the top earner among men and women \n    find the top earner in each athletic discipline\n    find the top earner among men and women in each athletic discipline\n\n\n# Homework 6\n\nYou're ready to tackle the homework on data manipulation\n\n\n\n```{=html}\n<iframe width=\"100%\" height = \"500px\" src=\"https://unl-statistics.github.io/stat251/homework/06-data-manip.html\"></iframe>\n```\n\n\n\n\n# Next time\n\n- Continue working on homework assignment\n\n- Start of (take-home) midterm week\n\n- Prep with the [practice exam](https://unl-statistics.github.io/stat251/exam/2023-midterm/), look over the [covered topics](https://unl-statistics.github.io/stat251/exam/2023-midterm/objectives.html)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}