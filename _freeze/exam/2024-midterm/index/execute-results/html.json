{
  "hash": "0d8c054aa890a6fa01b3a435ae673bc3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 251 Midterm Exam\nauthor: Firstname Lastname\ndate: '2024-03-07'\nexecute:\n  error: false\ncategories:\n- Exam\n- Week07\n- Week07\n---\n\n\n\nIn this exam, you'll be using data collected about US polling places. The [Center for Public Integrity](https://publicintegrity.org/) assembled this data using open records requests and contact with state or county election officials. Full documentation is available on the [github repository for the data](https://github.com/PublicI/us-polling-places) - each state's details can be found in a README file for that state; there is also a machine-readable `manifest.yaml` file for each state provided.\n\nWe will start out by using data assembled by the TidyTuesday project, but will eventually get to the raw data as well.\n\nThe raw CSV data is available at https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-01-16/polling_places.csv\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load any R packages you use in this chunk\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# load any python packages you use in this chunk\n```\n:::\n\n\n\n# Data Input - Polling Places\n(30 pts)\n\n## Data File Inspection\n\nHere are the first six lines of the TidyTuesday CSV file:\n\n```         \nelection_date,state,county_name,jurisdiction,jurisdiction_type,precinct_id,precinct_name,polling_place_id,location_type,name,address,notes,source,source_date,source_notes\n2020-11-03,AL,AUTAUGA,AUTAUGA,county,NA,AUTAUGAVILLE VOL FIRE DEPT,NA,election_day,AUTAUGAVILLE VOL FIRE DEPT,\"2610 HIGHWAY 14 W, AUTAUGAVILLE, AL 36003\",NA,ORR,2020-10-21,NA\n2020-11-03,AL,AUTAUGA,AUTAUGA,county,NA,BILLINGSLEY COMMUNITY CENTER,NA,election_day,BILLINGSLEY COMMUNITY CENTER,\"2159 COUNTY RD 37, BILLINGSLEY, AL 36006\",NA,ORR,2020-10-21,NA\n2020-11-03,AL,AUTAUGA,AUTAUGA,county,NA,BOONE'S CHAPEL,NA,election_day,BOONE'S CHAPEL,\"2301 COUNTY RD 66, PRATTVILLE, AL 36067\",NA,ORR,2020-10-21,NA\n2020-11-03,AL,AUTAUGA,AUTAUGA,county,NA,BOOTH VOL FIRE DEPT,NA,election_day,BOOTH VOL FIRE DEPT,\"1701 COUNTY ROAD 10, BOOTH, AL 36008\",NA,ORR,2020-10-21,NA\n2020-11-03,AL,AUTAUGA,AUTAUGA,county,NA,CAMELLIA BAPTIST CH,NA,election_day,CAMELLIA BAPTIST CH,\"201 WOODVALE ROAD, PRATTVILLE, AL 36067\",NA,ORR,2020-10-21,NA\n```\n\n1.  What is the file delimiter? (1 pt)    \n<Delete this and replace with your answer>\n\n2.  What is the header? (1 pt)    \n<Delete this and replace with your answer>\n\n3.  How many columns will the data have when it is read in using R or Python? (1 pt)    \n<Delete this and replace with your answer>\n\n4.  How is the data stored differently in the address field compared to the name field (1 pt), and why is this different handling necessary (1 pt)?    \n<Delete this and replace with your answer>\n\n## Reading the Data\n\nRead in the data in R (5 pts) and in python (5 pts).\n\nMake sure to load any packages which are necessary to run your code in the setup chunks at the beginning of the document.\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n## Summarize the Data\n\nUsing any method you choose from either language, fill in the following table.\n\nLanguage used: <Fill in>\n\nMake sure your terms match the language you're using and the code you provided above. If you use code to get these values (which is probably a good idea), please use the code chunks provided here:\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\nWhen computing the number of unique values, exclude missing values.\n\n| Column Name       | Data Type (5 pts) | # missing values (5 pts) | # unique values (5 pts) |\n|-------------|----------|-------------------------|-------------------------|\n| election_date     |           |                          |                                     |\n| state             |           |                          |                                     |\n| county_name       |           |                          |                                     |\n| jurisdiction      |           |                          |                                     |\n| jurisdiction_type |           |                          |                                     |\n| precinct_id       |           |                          |                                     |\n| precinct_name     |           |                          |                                     |\n| polling_place_id  |           |                          |                                     |\n| location_type     |           |                          |                                     |\n| name              |           |                          |                                     |\n| address           |           |                          |                                     |\n| notes             |           |                          |                                     |\n| source            |           |                          |                                     |\n| source_date       |           |                          |                                     |\n| source_notes      |           |                          |                                     |\n\n: Summary of Polling Data\n\n# Data Cleaning - Polling Places over Time\n(50 pts)\n\nFor this part of the exam, you'll use your student ID to get the state you'll be working with. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_nuid <- 96582245 # Change this value to your NUID\nstate_ids <- readRDS(\"state-ids.RDS\")\nmy_state <- state_ids$state[my_nuid%%37]\nprint(my_state)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"VT\"\n```\n\n\n:::\n:::\n\n\n\nYour end goal is to get a plot of the number of available polling places in each election, with separate lines for each jurisdiction (e.g. county) within your state. \n\n## Steps\n(10 pts)\n\nWrite out the steps (in plain language) required to get from the polling place data provided [here](https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-01-16/polling_places.csv) to the data you need to create your plot.\nMake sure to remove polling places which do not make sense - e.g. those with an address consisting of just the state name, or those named \"DO NOT USE\". \n\nFor each step, identify the data manipulation verb you will use, and any variables you will pass in as arguments. \nFill in the following table when you are finished. \nAdd new rows by moving to a new line, and separate each cell in the table with ` | ` (spaces matter). `|` is on the key above the enter key and shares a key with `\\` (backslash). You will need to hold shift down.\n\nStep # | Verb | Arguments\n--- | --- | ---\n 1 | ... | ... <!-- replace this line -->\n\n\n## Code\n(10 pts)\n\nWrite code in R or python to execute the steps you outlined above.\n\n## Chart Description\n(7 pts)\n\nUse the grammar of graphics to identify the components of the chart here, which provides the data for Wisconsin.\n![Wisconsin counties where the number of polling places changed, 2012-2020](wisconsin-example.jpg){width=\"50%\"}\n\n- geom: \n- aesthetics: (list at least 3)\n\n  - \n  - \n  - \n- coordinate system: \n- y axis scale: \n- x axis scale: \n\n\n## Chart\n(20 pts)\n\nWrite code in R or python to create a chart like that shown at the beginning of this example (5 pts). \nMake sure your axes are labeled (5 pts) and your chart has a title (5 pts).\nInclude your plot in this document and make sure you have a figure caption that describes what someone should notice in the chart (5 pts)\nYou may do this either by modifying the chunk options or by using `include=F` and manually including the picture with a caption.\n\n## Modifications\n\nEvaluate the chart you created for comprehensibility and accessibility. (1 pt)\n\nWhat modifications might you add to this chart to make it clearer and more understandable? (2 pts)\n\n\n\n# Data Processing\n(20 pts)\n\nYou want to mail a letter to every polling place in the state you were assigned. In order to do this, you need to separate out the pieces of the address: building number, street, city, state, and zip code. \nNote that not all addresses will have all of these components - in Alaska, for example, there are often not street numbers or even names. \n\n## Function Steps\n(5 pts)\n\nUse the following addresses to think through the steps you will need to accomplish this task.\n\n```\nTatitlek, AK 99677\nFirst Street, Cordova, AK 99574\n105 ICE ST, MENASHA, WI 54952-3223\n1025 W 5TH AVE, OSHKOSH, WI 54902\n1702 COUNTY ROAD 40 W, PRATTVILLE, AL 36067\n5281 HIGHWAY 29, CORINTH VFD (PEROTE STATION), BANKS, AL 36005\n713 W. MOUNTAIN AVENUE, JACKSONVILLE, AL 36265\nCOMMUNITY CENTER, 1168 HWY 84, SILAS, AL 36919\n```\n\nWrite out the steps your function will need to accomplish in plain language.\n\n\n## Function Code - Single Address\n(5 pts)\n\nWrite a function, `address_parser`, which can handle a single address and return a data structure containing each piece of the address, with NAs for pieces which are not matched.\n\n(change this chunk to python if you'd prefer to use python over R for this task)\n\n\n::: {.cell}\n\n:::\n\n\n\n\nThis chunk will test your function on the addresses provided as examples. \n(change this chunk to python if you used python above)\n\n\n::: {.cell}\n\n```{.r .cell-code}\naddress_parser(\"Tatitlek, AK 99677\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in address_parser(\"Tatitlek, AK 99677\"): could not find function \"address_parser\"\n```\n\n\n:::\n\n```{.r .cell-code}\naddress_parser(\"First Street, Cordova, AK 99574\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in address_parser(\"First Street, Cordova, AK 99574\"): could not find function \"address_parser\"\n```\n\n\n:::\n\n```{.r .cell-code}\naddress_parser(\"105 ICE ST, MENASHA, WI 54952-3223\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in address_parser(\"105 ICE ST, MENASHA, WI 54952-3223\"): could not find function \"address_parser\"\n```\n\n\n:::\n\n```{.r .cell-code}\naddress_parser(\"1025 W 5TH AVE, OSHKOSH, WI 54902\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in address_parser(\"1025 W 5TH AVE, OSHKOSH, WI 54902\"): could not find function \"address_parser\"\n```\n\n\n:::\n\n```{.r .cell-code}\naddress_parser(\"1702 COUNTY ROAD 40 W, PRATTVILLE, AL 36067\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in address_parser(\"1702 COUNTY ROAD 40 W, PRATTVILLE, AL 36067\"): could not find function \"address_parser\"\n```\n\n\n:::\n\n```{.r .cell-code}\naddress_parser(\"5281 HIGHWAY 29, CORINTH VFD (PEROTE STATION), BANKS, AL 36005\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in address_parser(\"5281 HIGHWAY 29, CORINTH VFD (PEROTE STATION), BANKS, AL 36005\"): could not find function \"address_parser\"\n```\n\n\n:::\n\n```{.r .cell-code}\naddress_parser(\"713 W. MOUNTAIN AVENUE, JACKSONVILLE, AL 36265\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in address_parser(\"713 W. MOUNTAIN AVENUE, JACKSONVILLE, AL 36265\"): could not find function \"address_parser\"\n```\n\n\n:::\n\n```{.r .cell-code}\naddress_parser(\"COMMUNITY CENTER, 1168 HWY 84, SILAS, AL 36919\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in address_parser(\"COMMUNITY CENTER, 1168 HWY 84, SILAS, AL 36919\"): could not find function \"address_parser\"\n```\n\n\n:::\n:::\n\n\n\n## Function Code - Vector\n(5 pts)\n\nWrite a function, `address_vec`, which can parse a vector of addresses and return a data frame with columns corresponding to each piece of the address.\n\n(change this chunk to python if you'd prefer to use python over R for this task)\n\n\n::: {.cell}\n\n:::\n\n\n\n\nThis chunk will test your function on the addresses provided as examples. Delete whichever chunk corresponds to the language you didn't use. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_vec <- c(\"Tatitlek, AK 99677\", \"First Street, Cordova, AK 99574\", \"105 ICE ST, MENASHA, WI 54952-3223\", \"1025 W 5TH AVE, OSHKOSH, WI 54902\", \"1702 COUNTY ROAD 40 W, PRATTVILLE, AL 36067\", \"5281 HIGHWAY 29, CORINTH VFD (PEROTE STATION), BANKS, AL 36005\", \"713 W. MOUNTAIN AVENUE, JACKSONVILLE, AL 36265\", \"COMMUNITY CENTER, 1168 HWY 84, SILAS, AL 36919\")\naddress_vec(test_vec)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in address_vec(test_vec): could not find function \"address_vec\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ntest_vec = [\"Tatitlek, AK 99677\", \"First Street, Cordova, AK 99574\", \"105 ICE ST, MENASHA, WI 54952-3223\", \"1025 W 5TH AVE, OSHKOSH, WI 54902\", \"1702 COUNTY ROAD 40 W, PRATTVILLE, AL 36067\", \"5281 HIGHWAY 29, CORINTH VFD (PEROTE STATION), BANKS, AL 36005\", \"713 W. MOUNTAIN AVENUE, JACKSONVILLE, AL 36265\", \"COMMUNITY CENTER, 1168 HWY 84, SILAS, AL 36919\"]\naddress_vec(test_vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNameError: name 'address_vec' is not defined\n```\n\n\n:::\n:::\n\n\n\n## Function Evaluation\n\nUse your function to parse a vector of the unique polling place addresses in your state, creating a data table of address components for your letters.\n(5 pts)\n\n\n\n::: {.cell}\n\n:::\n\n\n\nWhere did your function have issues, if it did? (5 pts)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}