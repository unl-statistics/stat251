{
  "hash": "41245737d13bd5f893e14b2b83a8f899",
  "result": {
    "engine": "knitr",
    "markdown": "---\npdf-engine: lualatex\nfrom: markdown+emoji\nfontsize: 11pt\ngeometry: margin=1in\nformat:\n  pdf:\n    keep-tex: false\n    template-partials:\n    - partials/title.tex\n    - partials/before-body.tex\n    - partials/graphics.tex\n    dev: cairo_pdf\ntitle: Syllabus\ninstructor: Heike Hofmann\nsemester: Spring 2025\nemail: hhofmann4@unl.edu\nweb: unl-statistics.github.io\nofficehours: \\href{https://calendly.com/drvanderplas/officehours}{Schedule here}\noffice: Hardin 346\nclassroom: CHASE 148\nclasshours: TR 11:00-12:15\ncategories:\n- reading\n- Week01\nimage: figs/reading.svg\ntype: reading\ndate: '2024-01-21'\n---\n\n\n\n\n\n# Course Description\n\nTechniques for processing, cleaning, and visualizing messy data. \nTopics include data reduction strategies, data transformations, combining multiple data sources, and special types of data (text, spatial, dates and times, hierarchical).\n\n\n# Course Objectives\n\nAt the end of this course, students will\n\n1. Use appropriate visualizations to explore and assess data and its applicability to a problem \n2. Write code to reshape and reformat moderately complex and/or messy data in a reproducible manner\n3. Create graphical displays to explore data, assess statistical models, and present model results\n4. Adapt pre-existing code for sophisticated visualizations to new data.\n5. Implement an algorithm or procedure for data modification given in pseudocode \n6. Write pseudocode to describe and document modifications made to the dataset\n7. Access documentation and source code to determine how software works (or why it doesn't)\n8. Identify problems in a dataset that limit the analyses which are appropriate for the data\n\n\n# Textbook\n\nThe primary textbook for this course is one that I have developed from other resources listed below. \nIt is available for free at \\url{https://srvanderplas.github.io/stat-computing-r-python/}. \nIt is under construction/a work in progress, so it may be hard to work more than a couple of weeks ahead in this class using the primary textbook.\n\nIn addition, you may find it useful to reference some of the following resources that I have consulted while assembling the textbook. Most are available online for free, though some require an institutional email address.\n\n- [R for Data Science](https://r4ds.had.co.nz/)\n\n- [Python for Everybody](https://www.py4e.com/html3/)\n\n- [Python for Data Analysis](https://www.oreilly.com/library/view/python-for-data/9781449323592/) - Available online for free if you register with your UNL email address.\n\n- [Python Data Science Handbook](https://learning.oreilly.com/library/view/python-data-science/9781491912126/) - Available online for free if you register with your UNL email address.\n\n- [Advanced R](http://adv-r.had.co.nz/)\n\n\n# Class Schedule & Topic Outline\n\nThis schedule is tentative and subject to change. \nStudents are expected to read the corresponding textbook chapter (linked in Canvas) **before coming to class**.\nFor the most part, for each week's topic, there will be one or two corresponding textbook chapters. \n\n\\FloatBarrier\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Course Calendar](figs/calendar.pdf){fig-align='center' fig-pos='ht'}\n:::\n:::\n\n\n\n\\small\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: Tentative schedule of class topics\n\nDate     Time      Topic                         \n-------  --------  ------------------------------\nJan 23             Getting Started               \nJan 25             Version Control               \nJan 30             Review: Functions             \nFeb  1             Review: Functions             \nFeb  6             Review: Data Structures       \nFeb  8             Review: Data Structures       \nFeb 13             Data Input                    \nFeb 15             Data Input                    \nFeb 20             Data Visualization            \nFeb 22             Data Visualization            \nFeb 27             Data Cleaning                 \nFeb 29             Data Cleaning                 \nMar  5             Exam 1 Questions              \nMar  7   6pm       Midterm Due                   \nMar 19             Strings                       \nMar 21             Strings                       \nMar 26             Reshaping Data                \nMar 28             Reshaping Data                \nApr  2             Joining Data                  \nApr  4             Joining Data                  \nApr  9             Dates and Times               \nApr 11             Dates and Times               \nApr 16             Project Work                  \nApr 18             Project Work                  \nApr 23             Lists                         \nApr 25             Lists                         \nApr 30             Project Work                  \nMay  2   6pm       Screencast Video Due          \nMay  7             Spatial Data                  \nMay  9   6pm       Peer Review of Screencast Due \nMay 14   10-12am   Scheduled Final               \n\n\n:::\n:::\n\n\n\\normalsize\n\n\\FloatBarrier\n\n# Course Policies\n\n## Assessment/Grading\n\nAssignments | Weight\n----- | -----\nReading Quizzes | 10%\nWeekly Homework & Participation | 50% \nMidterm Exam | 20%\nProject | 20%\n\n\nLower bounds for grade cutoffs are shown in the following table. I will not \"round up\" grades at the end of the semester beyond strict mathematical rules of rounding.\n\nLetter grade |\tX + |  \tX |\tX - \n:--------: | -----: | -----: | -----:\nA |\t97 |\t94 | \t90\nB |\t87 |\t84 |\t80\nC |\t77 |\t74 |\t70\nD |\t67 |\t64 |\t61\nF |\t| <61 | \n\nInterpretation of this table: A grade of 85 will receive a B. A grade of 77 will receive a C+. A grade of 70 will receive a C-. Anything below a 61 will receive an F. \n\n### Exams\n\nOne midterm exam will be given during the course of the semester, on dates noted on the Tentative Course Outline on the last page. \n\nExams will require that you write code to solve problems utilizing the course material. \nYou are expected to take exams at the scheduled times. \nIf this is impossible due to extreme circumstances (illness, death in the family, previously scheduled activities vital to academic program), please notify me and provide appropriate documentation. \nNo make-up exams will be given if I am not notified prior to the examination. \nYou will be required to obtain a note from your physician or advisor explaining the nature of the conflict.\n\n### Homework\n\nApproximately 8-12 homework assignments will be made over the course of the semester. \nYou will typically have one week to work on each of the assignments. \nThe only way to learn statistics is to practice working problems, and homework is therefore an essential part of the course. \nHomework must be submitted in the file format specified, and should run or compile as submitted.\n\n### Participation\n\nAll students are expected to attend and fully participate in class activities. \nParticipation will be determined based on a combination of class attendance and activities.\n\n### Project\n\nIn lieu of a final exam, there will be a final project in this course. \nYou will create an approximately 45 minute screencast showing yourself analyzing a dataset from [TidyTuesday](https://github.com/rfordatascience/tidytuesday). \nIt may be useful to familiarize yourself with TidyTuesday videos as you work through this course; you can find the full set of videos by searching for [#tidytuesday on YouTube](https://www.youtube.com/hashtag/tidytuesday) or using this [custom playlist](https://youtube.com/playlist?list=PL2joUpumI-Z-VDAgquuNFlGm_hPE2RLGh) containing videos which seem to focus on topics that would be accessible and/or interesting to a Stat 251 student.\n\nDetails and rubrics describing the final project will be provided after the midterm exam. \nThe project will be completed independently and will allow you to demonstrate that you have met the learning objectives for this course.\nYour video will be due the week before finals week. \nDuring finals week, you will peer review two of your classmates' screen casts; this must be completed before the officially scheduled final exam period is finished.\n\n\n### Late Policy\n\nIn general, assignments should be submitted by the assigned due date. \nLate assignments will be accepted only under extenuating circumstances, and only if you have contacted me **prior** to the assignment due date and received permission to hand the assignment in late. \nI reserve the right not to grade any assignments received after the assignment due date.\n\n### Resubmission Policy\n\nLearning how to program is a process that is ongoing. \nI want you to not be afraid to make mistakes. \nAs a result, I allow you to re-submit homework over the course of the semester in order to make corrections and respond to my initial feedback.\n\nThis policy is subject to a few constraints:\n\n- Each assignment should be resubmitted only once (to minimize repeat grading) unless you've obtained prior permission.\n\n- You should resubmit assignments as soon as possible.    \nI reserve the right to cut off assignment resubmissions on a rolling basis (e.g. you have 3 weeks after the original due date) or based on the point in the semester (e.g. all homeworks due before Spring Break must be resubmitted by the week after we return from Spring Break).\n<!-- There are multiple reasons for this policy: -->\n\n<!--   - The material in this class is cumulative, so it is important that you understand a topic before we move on to more advanced material -->\n\n<!--   - Students in the past who have resubmitted all homework just before the end of the semester don't do a good job and don't seem to retain the material.  -->\n\n<!--   - I want to keep my grading load to a reasonable level -->\n\nI spend the extra time grading resubmissions because it reinforces your learning; this policy is not designed to ensure that you can get a better grade in this class. \nThis resubmission policy is subject to adjustments throughout the semester to ensure that this objective is met. \nI reserve the right to limit or penalize resubmissions if it becomes clear that the current policy does not promote learning of the material and/or support the course objectives.\n\n## Attendance\n\nYou are expected to attend class and/or participate virtually. \nConsistent, repeated failure to attend class or actively participate in the course will affect the participation portion of your grade.\n\nIf you are feeling ill, please **do not come to class**. \nInstead, review the material and work on the homework assignment, and then schedule an appointment with me to meet virtually.\n\n\n## Inclement Weather\n\nIf in-person classes are canceled, you will be notified of the instructional continuity plan for this class by Canvas Announcement. \nIn most circumstances where there is power in the Lincoln area, we will hold class via Zoom if the university cancels class. \n\n## Expectations\n\nYou can expect me to:\n\n- reply to emails within 48 hours during the week (72 hours on weekends)\n- be available in class to assist with assignments\n- be available by appointment for additional help or discussion\n\nI expect you to:\n\n- Read the module material, take the reading quiz, and watch any applicable videos before coming to class\n- Engage with the material and your classmates during class\n- Be on-topic during class. While I encourage you to work on assignments during class, you should be working on homework for this class and not working on assignments from other classes. \n- Seek help when you do not understand the material\n- Communicate promptly if you anticipate that you will have trouble meeting deadlines or participating in a portion of the course.\n- Do your own troubleshooting before contacting me for help (and mention things you've already tried when you do ask for help!)\n- Be respectful and considerate of everyone in the class\n\n\n### Make Mistakes!\n\nProgramming is the process of making a series of silly or stupid mistakes, and then slowly fixing each mistake (while adding a few more). \nThe only way to know how to fix these mistakes (and avoid them in the future) is to make them.\n(Sometimes, you have to make the same mistake a few dozen times before you can avoid it in the future). \nAt some point during the class, you will find that you've spent 30 minutes staring at an error caused by a typo, a space, a parenthesis in the wrong place. \nYou may ask for help debugging this weird error, only to have someone immediately point out the problem... **it is always easier to see these things in someone else's code**. \nThis is part of programming, it is normal, and you shouldn't feel embarrassed or apologize (unless you put no effort into troubleshooting the problem before you asked for help)\n\nIf you manage to produce an error I haven't seen before, then congratulations! :clap: \nYou have achieved something special, and that achievement should be celebrated. :tada: \nEach new and bizarre error is an opportunity to learn a bit more about the programming language, the operating system, or the interaction between the two.\n\n## Assignment Evaluation Criteria\n\nIn every assignment, discussion, and written component of this class, you are expected to demonstrate that you are intellectually engaging with the material. \nI will evaluate you based on this engagement, which means that technically correct but low effort answers which do not demonstrate engagement or understanding will receive no credit.\n\nWhen you answer questions in this class, your goal is to show that you either understand the material or are actively engaging with it. \nIf you did not achieve this goal, then your answer is incomplete, regardless of whether or not it is technically correct. \nThis is not to encourage you to add unnecessary complexity to your answer - simple, elegant solutions are always preferable to unwieldy, complex solutions that accomplish the same task.\n\nWhile this is not an English class, grammar and spelling are important, as is your ability to communicate technical information in writing; both of these criteria will be used in addition to assignment-specific rubrics to evaluate your work.\n\nWith the proliferation of AI tools such as Chat-GPT, I reserve the right to replace exam and homework grades with grades based on a discussion of your submitted solutions. \nIf you cannot explain why your solution is correct, or the logic behind your solution, then you will not receive credit.\nChat GPT can be a useful tool, but this course's objectives are meant to assess your ability to program in R and Python, not your ability to use AI systems.\n\n\n## Academic Integrity and Class Conduct\n\nYou will be engaging with your classmates and me through in-person discussions and collaborative activities. \nIt is expected that everyone will engage in these interactions civilly and in good faith.\nDiscussion and disagreement are important parts of the learning process, but it is important that mutual respect prevail. \nIndividuals who detract from an atmosphere of civility and respect will be removed from the conversation or the classroom.\n\nStudents are expected to adhere to guidelines concerning academic dishonesty outlined in [Article III B.1 of the University's Student Code of Conduct](http://stuafs.unl.edu/dos/code). \nThe Statistics Department [academic integrity and grade appeal policy is available here](https://statistics.unl.edu/grade-appeals-and-academic-integrity-policy).\n\nYou must be able to explain how the logic works for any code you turn in. \nThis means that code you obtained from e.g. StackOverflow is fine to use if you can explain it and modify it for the purposes of this class, but if you cannot explain your code you will not get credit for the assignment. \nThis is in line with what is generally considered acceptable behavior in programming - reuse is fine (subject to the code's license) but you must be able to fully explain and modify any code you did not write yourself. \n\n# Required University Information\n\nSee \\url{https://executivevc.unl.edu/academic-excellence/teaching-resources/course-policies}.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "\\usepackage{booktabs}\n\\usepackage{longtable}\n\\usepackage{array}\n\\usepackage{multirow}\n\\usepackage{wrapfig}\n\\usepackage{float}\n\\usepackage{colortbl}\n\\usepackage{pdflscape}\n\\usepackage{tabu}\n\\usepackage{threeparttable}\n\\usepackage{threeparttablex}\n\\usepackage[normalem]{ulem}\n\\usepackage{makecell}\n\\usepackage{xcolor}\n"
      ]
    },
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}