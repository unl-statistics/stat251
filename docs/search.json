[
  {
    "objectID": "exam/objectives.html",
    "href": "exam/objectives.html",
    "title": "Exam objectives",
    "section": "",
    "text": "Note: This list omits objectives from the “review” section, but they are still relevant.\n\nRead in data from common formats into R or Python\nIdentify delimiters, headers, and other essential components of files\nCreate charts designed to communicate specific aspects of the data\nDescribe charts using the grammar of graphics\nCreate layered graphics that highlight multiple aspects of the data\nEvaluate existing charts and develop new versions that improve accessibility and readability\nIdentify required sequence of steps for data cleaning\nDescribe step-by-step data cleaning process in lay terms appropriately\nApply data manipulation verbs to prepare data for analysis\nUnderstand the consequences of data cleaning steps for statistical analysis\nCreate summaries of data appropriate for analysis or display using data manipulation techniques\n\nYou have also been introduced to the objectives of Exploratory Data Analysis:\n\nUnderstand the main goals of exploratory data analysis\nGenerate and answer questions about a new data set using charts, tables, and numerical summaries"
  },
  {
    "objectID": "exam/2023-midterm/index.html",
    "href": "exam/2023-midterm/index.html",
    "title": "Practice Exam (2023)",
    "section": "",
    "text": "Your goal on this exam is to demonstrate competency in as many of the objectives of chapters we’ve covered in this class so far as you can."
  },
  {
    "objectID": "exam/2023-midterm/index.html#ground-rules",
    "href": "exam/2023-midterm/index.html#ground-rules",
    "title": "Practice Exam (2023)",
    "section": "Ground Rules",
    "text": "Ground Rules\n\nYou may use the textbook and the internet (but the same rules apply - you must be able to explain your answer!)\nYou may NOT confer with other people or AI entities - including posting on StackOverflow, Reddit, etc.\nYou may ask clarifying questions of Dr. Vanderplas by email/zoom or in person\nYou may use R or Python for any of these tasks, but your code must be reproducible - I must be able to run your quarto file on my machine. I have provided R chunks in the correct locations in this file - change them to Python if you wish.\nFor any plot or table you create, be sure to appropriately caption and label it, providing 1-2 sentences to highlight the main purpose/conclusions you can draw from that plot.\nYou should have at least one code chunk for each ## heading below."
  },
  {
    "objectID": "exam/2023-midterm/index.html#read-in-the-data",
    "href": "exam/2023-midterm/index.html#read-in-the-data",
    "title": "Practice Exam (2023)",
    "section": "Read in the Data",
    "text": "Read in the Data\nWrite code which will:\n\nDownload the raw pocket measurements.csv data to a file in this repository\nRead the data in, ensuring that columns containing numbers are appropriately formatted. You may consider the fabric column as a character string."
  },
  {
    "objectID": "exam/2023-midterm/index.html#conduct-an-exploratory-data-analysis",
    "href": "exam/2023-midterm/index.html#conduct-an-exploratory-data-analysis",
    "title": "Practice Exam (2023)",
    "section": "Conduct an Exploratory Data Analysis",
    "text": "Conduct an Exploratory Data Analysis\nGenerate at least 3 questions about the data set and find answers to those questions using charts, tables, or numerical summaries.\n\nQuestions\n\n\n\n\n\n\n\nQuestion Answers\nYour discussion of this output goes here.\nYour discussion of this output goes here.\nYour discussion of this output goes here"
  },
  {
    "objectID": "exam/2023-midterm/index.html#comparing-sexes-and-styles",
    "href": "exam/2023-midterm/index.html#comparing-sexes-and-styles",
    "title": "Practice Exam (2023)",
    "section": "Comparing Sexes and Styles",
    "text": "Comparing Sexes and Styles\nGenerate one or two plots which best showcase the difference in pocket sizes for different sexes and styles of pants. Use The Pudding’s classification for pants styles, treating straight and boot-cut styles as the same and skinny and slim styles as the same.\nYou may annotate the plot with the output from statistical tests if you wish, but it is sufficient to highlight the visual differences. Your chart(s) must have appropriate titles and axis labels, and must be constructed to take into account the principles of good graphics discussed in the textbook.\nYour discussion of this output goes here.\nReplace this paragraph with 1-2 sentences discussing what choices you made to make the plot you generated above perceptually optimal. Which principles of good graphics did you use?"
  },
  {
    "objectID": "slides/12b-datetime.html#logistics",
    "href": "slides/12b-datetime.html#logistics",
    "title": "Last 4 weeks",
    "section": "Logistics",
    "text": "Logistics"
  },
  {
    "objectID": "slides/12b-datetime.html#feedback",
    "href": "slides/12b-datetime.html#feedback",
    "title": "Last 4 weeks",
    "section": "Feedback",
    "text": "Feedback\n\nClaimed Dataset: make sure to add the link to the Tidy Tuesday page\nHomework 10: Looks good, make sure to submit!"
  },
  {
    "objectID": "slides/12b-datetime.html#script",
    "href": "slides/12b-datetime.html#script",
    "title": "Last 4 weeks",
    "section": "Script",
    "text": "Script\nFor each of the Things you defined, write out at least three paragraphs:\nMake sure to:\n\ninclude definitions (i.e. how do you measure strength)\ngive context (i.e. which variables are used)\ntie ‘things’ in with the topics in the class"
  },
  {
    "objectID": "slides/12b-datetime.html#homework-11",
    "href": "slides/12b-datetime.html#homework-11",
    "title": "Last 4 weeks",
    "section": "Homework 11",
    "text": "Homework 11"
  },
  {
    "objectID": "slides/11a-join.html#logistics",
    "href": "slides/11a-join.html#logistics",
    "title": "Join up, Detectives!",
    "section": "Logistics",
    "text": "Logistics\n\nFocus on homework 9: Murder in SQL City"
  },
  {
    "objectID": "slides/11a-join.html#homework-9",
    "href": "slides/11a-join.html#homework-9",
    "title": "Join up, Detectives!",
    "section": "Homework 9",
    "text": "Homework 9\n\nSolve a murder!"
  },
  {
    "objectID": "slides/11a-join.html#connection-of-homework-9-to-joins",
    "href": "slides/11a-join.html#connection-of-homework-9-to-joins",
    "title": "Join up, Detectives!",
    "section": "Connection of homework 9 to joins",
    "text": "Connection of homework 9 to joins\n\nMake sure to look at the relationship between the different data sets!\nThe first filter statement gives you enough information to start searching for witness statements.\n\n\n\nSecurity footage shows that there were 2 witnesses. The first witness lives at the last house on \"Northwestern Dr\". The second witness, named Annabel, lives somewhere on \"Franklin Ave\".\n\n\n\nEventually you will be in the situation that you need to look up information from a different table based on a key variable. Instead of using a filter with that information, merge the two tables to directly incorporate the information from the other table."
  },
  {
    "objectID": "slides/11a-join.html#joining-with-by",
    "href": "slides/11a-join.html#joining-with-by",
    "title": "Join up, Detectives!",
    "section": "Joining with by=",
    "text": "Joining with by=\nHow do we join person and interview?\nVariable id in person is linking to person_id in interview\n\nperson_interview &lt;- person %&gt;% left_join(interview, by=c(\"id\"=\"person_id\"))\n\nhead(person_interview)\n\n     id                name license_id address_number address_street_name\n1 10000  Christoper Peteuil     993845            624        Bankhall Ave\n2 10007 Kourtney Calderwood     861794           2791       Gustavus Blvd\n3 10010           Muoi Cary     385336            741     Northwestern Dr\n4 10016         Era Moselle     431897           1987       Wood Glade St\n5 10025        Trena Hornby     550890            276       Daws Hill Way\n6 10027     Antione Godbolt     439509           2431           Zelham Dr\n        ssn\n1 747714076\n2 477972044\n3 828638512\n4 614621061\n5 223877684\n6 491650087\n                                                                transcript\n1                                                                     &lt;NA&gt;\n2                          CHAPTER IV. The Rabbit Sends in a Little Bill\\n\n3                                                                     &lt;NA&gt;\n4                                                                       \\n\n5                                                                       \\n\n6 nearer to watch them, and just as she came up to them she heard one of\\n"
  },
  {
    "objectID": "slides/11a-join.html#backup-for-a-moment",
    "href": "slides/11a-join.html#backup-for-a-moment",
    "title": "Join up, Detectives!",
    "section": "Backup for a moment",
    "text": "Backup for a moment\nGeneral idea of joining tables"
  },
  {
    "objectID": "slides/11a-join.html#difference-between-the-joins",
    "href": "slides/11a-join.html#difference-between-the-joins",
    "title": "Join up, Detectives!",
    "section": "Difference between the joins",
    "text": "Difference between the joins\nData sets are joined along values of variables.\nIn dplyr there are several join functions: left_join, inner_join, full_join, …\nDifferences between join functions only visible, if not all values in one set have values in the other"
  },
  {
    "objectID": "slides/11a-join.html#example",
    "href": "slides/11a-join.html#example",
    "title": "Join up, Detectives!",
    "section": "Example",
    "text": "Example\n\ndf1 &lt;- data.frame(id = 1:6, trt = rep(c(\"A\", \"B\", \"C\"), rep=c(2,1,3)), value = c(5,3,7,1,2,3))\ndf1\n\n  id trt value\n1  1   A     5\n2  2   B     3\n3  3   C     7\n4  4   A     1\n5  5   B     2\n6  6   C     3\n\n\n\ndf2 &lt;- data.frame(id=c(4,4,5,5,7,7), stress=rep(c(0,1), 3), bpm = c(65, 125, 74, 136, 48, 110))\ndf2\n\n  id stress bpm\n1  4      0  65\n2  4      1 125\n3  5      0  74\n4  5      1 136\n5  7      0  48\n6  7      1 110"
  },
  {
    "objectID": "slides/11a-join.html#left-join",
    "href": "slides/11a-join.html#left-join",
    "title": "Join up, Detectives!",
    "section": "Left join",
    "text": "Left join\n\nall elements in the left data set are kept\nnon-matches are filled in by NA\nright_join works symmetric\n\n\nleft_join(df1, df2, by=\"id\")\n\n  id trt value stress bpm\n1  1   A     5     NA  NA\n2  2   B     3     NA  NA\n3  3   C     7     NA  NA\n4  4   A     1      0  65\n5  4   A     1      1 125\n6  5   B     2      0  74\n7  5   B     2      1 136\n8  6   C     3     NA  NA"
  },
  {
    "objectID": "slides/11a-join.html#inner-join",
    "href": "slides/11a-join.html#inner-join",
    "title": "Join up, Detectives!",
    "section": "Inner join",
    "text": "Inner join\n\nonly matches from both data sets are kept\n\n\ninner_join(df1, df2, by = \"id\")\n\n  id trt value stress bpm\n1  4   A     1      0  65\n2  4   A     1      1 125\n3  5   B     2      0  74\n4  5   B     2      1 136"
  },
  {
    "objectID": "slides/11a-join.html#full-join",
    "href": "slides/11a-join.html#full-join",
    "title": "Join up, Detectives!",
    "section": "Full join",
    "text": "Full join\n\nall ids are kept, missings are filled in with NA\n\n\nfull_join(df1, df2, by = \"id\")\n\n   id  trt value stress bpm\n1   1    A     5     NA  NA\n2   2    B     3     NA  NA\n3   3    C     7     NA  NA\n4   4    A     1      0  65\n5   4    A     1      1 125\n6   5    B     2      0  74\n7   5    B     2      1 136\n8   6    C     3     NA  NA\n9   7 &lt;NA&gt;    NA      0  48\n10  7 &lt;NA&gt;    NA      1 110"
  },
  {
    "objectID": "slides/11a-join.html#traps-of-joins",
    "href": "slides/11a-join.html#traps-of-joins",
    "title": "Join up, Detectives!",
    "section": "Traps of joins",
    "text": "Traps of joins\n\nsometimes we unexpectedly cannot match values: missing values, different spelling, …\njoin can be along multiple variables, e.g. by = c(\"ID\", \"Date\")\njoining variable(s) can have different names, e.g. by = c(\"State\" = \"Name\")\nalways make sure to check dimensions of data before and after a join\ncheck on missing values; help with that: anti_join"
  },
  {
    "objectID": "slides/11a-join.html#anti-join",
    "href": "slides/11a-join.html#anti-join",
    "title": "Join up, Detectives!",
    "section": "Anti join",
    "text": "Anti join\n\ncareful, not symmetric!\n\n\nanti_join(df1, df2, by=\"id\") # no values for id in df2\n\n  id trt value\n1  1   A     5\n2  2   B     3\n3  3   C     7\n4  6   C     3\n\nanti_join(df2, df1, by=\"id\") # no values for id in df1\n\n  id stress bpm\n1  7      0  48\n2  7      1 110"
  },
  {
    "objectID": "slides/10a-reshape.html#logistics",
    "href": "slides/10a-reshape.html#logistics",
    "title": "Reshaping Dogs",
    "section": "Logistics",
    "text": "Logistics\n\nReading quiz 9 due\nFocus on homework 8 on Tuesday, start working on homework 9 on Thursday\nStart thinking about the project"
  },
  {
    "objectID": "slides/10a-reshape.html#reshaping",
    "href": "slides/10a-reshape.html#reshaping",
    "title": "Reshaping Dogs",
    "section": "Reshaping",
    "text": "Reshaping\nIs the data tidy? - question of the key\n\nthe key\nthe whole key\nand nothing but the key"
  },
  {
    "objectID": "slides/10a-reshape.html#the-key---first-normal-form",
    "href": "slides/10a-reshape.html#the-key---first-normal-form",
    "title": "Reshaping Dogs",
    "section": "The key - First normal form",
    "text": "The key - First normal form\nA data set can be written in a rectangular form:\n\neach observation is in one row\neach variable is in a column\nthere is a key: one or more variables in the dataset provide a unique descriptor for each observation"
  },
  {
    "objectID": "slides/10a-reshape.html#not-in-first-normal-form",
    "href": "slides/10a-reshape.html#not-in-first-normal-form",
    "title": "Reshaping Dogs",
    "section": "Not in First Normal Form",
    "text": "Not in First Normal Form\nExample 1: no key\n\n\n [1] 0.80463517 0.64060029 0.64842185 0.26700195 0.90290315 0.87371680\n [7] 0.09969296 0.68885715 0.28142305 0.10479012\n\n\nExample 2: not rectangular"
  },
  {
    "objectID": "slides/10a-reshape.html#the-whole-key---2nd-normal-form",
    "href": "slides/10a-reshape.html#the-whole-key---2nd-normal-form",
    "title": "Reshaping Dogs",
    "section": "The whole key - 2nd normal form",
    "text": "The whole key - 2nd normal form\nA table is in 2nd normal form, when:\n\nit is in 1st normal form\nand all non-key columns depend on all parts of the key\n\n“No split key”\nTables in 1st normal form with a single key variable are automatically in 2nd normal form"
  },
  {
    "objectID": "slides/10a-reshape.html#is-this-table-in-2nd-normal-form",
    "href": "slides/10a-reshape.html#is-this-table-in-2nd-normal-form",
    "title": "Reshaping Dogs",
    "section": "Is this table in 2nd normal form?",
    "text": "Is this table in 2nd normal form?"
  },
  {
    "objectID": "slides/10a-reshape.html#nothing-but-the-key---3rd-normal-form",
    "href": "slides/10a-reshape.html#nothing-but-the-key---3rd-normal-form",
    "title": "Reshaping Dogs",
    "section": "Nothing but the key - 3rd normal form",
    "text": "Nothing but the key - 3rd normal form\nA table is in 3rd normal form, when:\n\nit is in 2nd normal form\nand no non-key column can be determined by another non-key column\n\ne.g.: zip code determines county and state"
  },
  {
    "objectID": "slides/10a-reshape.html#data-normalization",
    "href": "slides/10a-reshape.html#data-normalization",
    "title": "Reshaping Dogs",
    "section": "Data Normalization",
    "text": "Data Normalization\nProcess of getting table into higher normal forms is called normalization\nNormalization gives a framework to organize and ensure\n\nreduce redundancy in data\nimprove data consistency\nsimplify the database design\nincrease speed to access data\neasier maintenance\n\nNormalization is generally terrible for any statistical modelling"
  },
  {
    "objectID": "slides/10a-reshape.html#key-value-pairs",
    "href": "slides/10a-reshape.html#key-value-pairs",
    "title": "Reshaping Dogs",
    "section": "Key-Value Pairs",
    "text": "Key-Value Pairs\nStricter version of the 3rd NF:\n\ntable is in 2nd normal form,\nthere is only a single non-key element in a table\n\nNote: a table like this is automatically in 3rd normal form."
  },
  {
    "objectID": "slides/10a-reshape.html#traits-of-dog-breeds",
    "href": "slides/10a-reshape.html#traits-of-dog-breeds",
    "title": "Reshaping Dogs",
    "section": "Traits of Dog Breeds",
    "text": "Traits of Dog Breeds\n\n\n                  Breed Affectionate.With.Family Good.With.Young.Children\n1 Retrievers (Labrador)                        5                        5\n2       French Bulldogs                        5                        5\n3  German Shepherd Dogs                        5                        5\n4   Retrievers (Golden)                        5                        5\n5              Bulldogs                        4                        3\n6               Poodles                        5                        5\n  Good.With.Other.Dogs Shedding.Level Coat.Grooming.Frequency Drooling.Level\n1                    5              4                       2              2\n2                    4              3                       1              3\n3                    3              4                       2              2\n4                    5              4                       2              2\n5                    3              3                       3              3\n6                    3              1                       4              1\n  Coat.Type Coat.Length Openness.To.Strangers Playfulness.Level\n1    Double       Short                     5                 5\n2    Smooth       Short                     5                 5\n3    Double      Medium                     3                 4\n4    Double      Medium                     5                 4\n5    Smooth       Short                     4                 4\n6     Curly        Long                     5                 5\n  Watchdog.Protective.Nature Adaptability.Level Trainability.Level Energy.Level\n1                          3                  5                  5            5\n2                          3                  5                  4            3\n3                          5                  5                  5            5\n4                          3                  5                  5            3\n5                          3                  3                  4            3\n6                          5                  4                  5            4\n  Barking.Level Mental.Stimulation.Needs\n1             3                        4\n2             1                        3\n3             3                        5\n4             1                        4\n5             2                        3\n6             4                        5\n\n\nData set is in “Wide Form”\nWithout knowing the data well, it could be that some of the non-key variables could determine parts of other non-key variables (violations of 3rd normal form)"
  },
  {
    "objectID": "slides/10a-reshape.html#traits-of-dog-breeds-in-long-form",
    "href": "slides/10a-reshape.html#traits-of-dog-breeds-in-long-form",
    "title": "Reshaping Dogs",
    "section": "Traits of Dog Breeds in Long Form",
    "text": "Traits of Dog Breeds in Long Form\n\ntraits %&gt;% select(Breed, 2:4) %&gt;% \n  pivot_longer(cols=2:4, names_to = \"Trait\", values_to = \"Score\") %&gt;% \n  head()\n\n# A tibble: 6 × 3\n  Breed                 Trait                    Score\n  &lt;chr&gt;                 &lt;chr&gt;                    &lt;int&gt;\n1 Retrievers (Labrador) Affectionate.With.Family     5\n2 Retrievers (Labrador) Good.With.Young.Children     5\n3 Retrievers (Labrador) Good.With.Other.Dogs         5\n4 French Bulldogs       Affectionate.With.Family     5\n5 French Bulldogs       Good.With.Young.Children     5\n6 French Bulldogs       Good.With.Other.Dogs         4\n\n\nThe combination of Breed and Trait (Key) uniquely determines the score value (Value)."
  },
  {
    "objectID": "slides/10a-reshape.html#homework-8",
    "href": "slides/10a-reshape.html#homework-8",
    "title": "Reshaping Dogs",
    "section": "Homework 8",
    "text": "Homework 8\n\nReshape two data sets\nCreate a visual in each\nOne reshaping in python, one in R"
  },
  {
    "objectID": "slides/10a-reshape.html#visuals-in-homework-8",
    "href": "slides/10a-reshape.html#visuals-in-homework-8",
    "title": "Reshaping Dogs",
    "section": "Visuals in homework 8",
    "text": "Visuals in homework 8\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1: Trait Distributions\n\n\n\n\n\n\n\n\n\n\n\nFigure 2: Ranks of (some) Breeds over time"
  },
  {
    "objectID": "slides/09b-strings.html#working-with-regular-expressions",
    "href": "slides/09b-strings.html#working-with-regular-expressions",
    "title": "Working with Strings",
    "section": "Working with regular expressions",
    "text": "Working with regular expressions\nstr_view in stringr package (in R) shows all matches:\n\nstringr::str_view(\"&gt; Poem for a Friend. \", pattern = \"\\\\W\")\n\n[1] │ &lt;&gt;&gt;&lt; &gt;Poem&lt; &gt;for&lt; &gt;a&lt; &gt;Friend&lt;.&gt;&lt; &gt;\n\nstringr::str_view(\"&gt; Poem for a Friend. \", pattern = \"\\\\b\")\n\n[1] │ &gt; &lt;&gt;Poem&lt;&gt; &lt;&gt;for&lt;&gt; &lt;&gt;a&lt;&gt; &lt;&gt;Friend&lt;&gt;. \n\n\nstr_count counts all matches in R:\n\nstringr::str_count(\"&gt; Poem for a Friend. \", pattern = \"\\\\b\")/2\n\n[1] 4\n\n\nfind_all and len count all matches in python:\n\nimport re\nres = re.findall(\"\\\\b\", \"&gt; Poem for a Friend. \")\nlen(res)/2\n\n4.0"
  },
  {
    "objectID": "slides/09b-strings.html#idea-for-exploration",
    "href": "slides/09b-strings.html#idea-for-exploration",
    "title": "Working with Strings",
    "section": "Idea for Exploration",
    "text": "Idea for Exploration\nRun summary statistics for second poet. Then compare."
  },
  {
    "objectID": "slides/09b-strings.html#homework-8",
    "href": "slides/09b-strings.html#homework-8",
    "title": "Working with Strings",
    "section": "Homework 8",
    "text": "Homework 8\nPivoting with dogs :)"
  },
  {
    "objectID": "slides/02a-review-topics.html#working-environment",
    "href": "slides/02a-review-topics.html#working-environment",
    "title": "Programming Review",
    "section": "Working Environment",
    "text": "Working Environment\n\nKnow the 3 different ways to execute code from within RStudio\n\nTerminal (Command Line)\nSource Script (RStudio Button)\nInteractive Mode (line by line)\n\nDifferentiate between the Console and the Terminal\nDifferentiate between R and Python in the Console"
  },
  {
    "objectID": "slides/02a-review-topics.html#rstudio-projects",
    "href": "slides/02a-review-topics.html#rstudio-projects",
    "title": "Programming Review",
    "section": "RStudio Projects",
    "text": "RStudio Projects\nRStudio projects are a way to keep your work organized.\nLet’s create one for this week’s class work.\n\nCreating an RStudio Project"
  },
  {
    "objectID": "slides/02a-review-topics.html#general-programming",
    "href": "slides/02a-review-topics.html#general-programming",
    "title": "Programming Review",
    "section": "General Programming",
    "text": "General Programming\nReview: General Programming\nKnow how to:\n\nDefine a variable\nWrite a function\nWrite an if/else statement\nload a package or import a library\nCreate a data table structure\nGet a column, row, or value from a data table\nGet an item from a list"
  },
  {
    "objectID": "slides/02a-review-topics.html#self-assessment",
    "href": "slides/02a-review-topics.html#self-assessment",
    "title": "Programming Review",
    "section": "Self-assessment",
    "text": "Self-assessment\nIt’s sometimes hard to know what you know and what you don’t know\nSelf-assessment in Canvas: due by Feb 6"
  },
  {
    "objectID": "slides/02a-review-topics.html#homework-2",
    "href": "slides/02a-review-topics.html#homework-2",
    "title": "Programming Review",
    "section": "Homework 2",
    "text": "Homework 2\n\nFocus on the logic and thinking through the steps\nWork with pencil and paper first"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#introduce-yourself",
    "href": "slides/01-Syllabus-and-Introductions.html#introduce-yourself",
    "title": "Introduction",
    "section": "Introduce yourself!",
    "text": "Introduce yourself!\n\nName / Year / Major\nWhat do you hope to learn in this class?\nPrevious computing experience?\nIs a poptart a ravioli? Why or why not?"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#my-introduction",
    "href": "slides/01-Syllabus-and-Introductions.html#my-introduction",
    "title": "Introduction",
    "section": "My Introduction",
    "text": "My Introduction\n\nHeike Hofmann\nProfessor in Statistics\nAt UNL since August, I was at ISU for 20 years\nfirst computer language was Pascal :)\nR user since 1996, Python user (? I have learned it four times by now)"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#on-poptarts-and-ravioli",
    "href": "slides/01-Syllabus-and-Introductions.html#on-poptarts-and-ravioli",
    "title": "Introduction",
    "section": "On PopTarts and Ravioli:",
    "text": "On PopTarts and Ravioli:\n\nThe Cube Rule of Food, from RedditThus, a PopTart is a calzone."
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#contact-info",
    "href": "slides/01-Syllabus-and-Introductions.html#contact-info",
    "title": "Introduction",
    "section": "Contact Info",
    "text": "Contact Info\n\nEmail: hhofmann4@unl.edu\nOffice: 346D Hardin Hall North Wing\nOffice Hours: TBD"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#course-objectives",
    "href": "slides/01-Syllabus-and-Introductions.html#course-objectives",
    "title": "Introduction",
    "section": "Course Objectives",
    "text": "Course Objectives\n\n\nUse appropriate visualizations to explore and assess data and its applicability to a problem\n\n\n\n\nWrite code to reshape and reformat moderately complex and/or messy data in a reproducible manner\n\n\n\n\nCreate graphical displays to explore data, assess statistical models, and present model results\n\n\n\n\nAdapt pre-existing code for sophisticated visualizations to new data."
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#course-objectives-1",
    "href": "slides/01-Syllabus-and-Introductions.html#course-objectives-1",
    "title": "Introduction",
    "section": "Course Objectives",
    "text": "Course Objectives\n\n\nImplement an algorithm or procedure for data modification given in pseudocode\n\n\n\n\nWrite pseudocode to describe and document modifications made to a data set\n\n\n\n\nAccess documentation and source code to determine how software works (or why it doesn’t)\n\n\n\n\nIdentify problems in a data set that limit the analyses which are appropriate for the data"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#textbook",
    "href": "slides/01-Syllabus-and-Introductions.html#textbook",
    "title": "Introduction",
    "section": "Textbook",
    "text": "Textbook\nhttps://srvanderplas.github.io/stat-computing-r-python/"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#course-materials",
    "href": "slides/01-Syllabus-and-Introductions.html#course-materials",
    "title": "Introduction",
    "section": "Course Materials",
    "text": "Course Materials\n\n\n\nCanvas\n\nquizzes\nweekly readings\nhomework/exam/project submission\n\n\n\n\nCourse site\n\nslides\nweekly readings\nhomework/exam/project descriptions\n\n\nEverything should be cross-linked properly but email me if there’s an issue."
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#class-schedule",
    "href": "slides/01-Syllabus-and-Introductions.html#class-schedule",
    "title": "Introduction",
    "section": "Class Schedule",
    "text": "Class Schedule"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#outline",
    "href": "slides/01-Syllabus-and-Introductions.html#outline",
    "title": "Introduction",
    "section": "Outline",
    "text": "Outline\nSubject to change based on the events of the semester…\n\n\n\n\n\nDate\nTopic\n\n\n\n\nJan 21\nGetting Started\n\n\nJan 23\nVersion Control\n\n\nJan 28\nReview: Functions\n\n\nJan 30\nReview: Functions\n\n\nFeb 4\nReview: Data Structures\n\n\nFeb 6\nReview: Data Structures\n\n\nFeb 11\nData Input\n\n\nFeb 13\nData Input\n\n\nFeb 18\nData Visualization\n\n\nFeb 20\nData Visualization\n\n\nFeb 25\nData Cleaning\n\n\nFeb 27\nData Cleaning\n\n\nMar 4\nExam 1 Questions\n\n\nMar 6\nStrings\n\n\nMar 11\nStrings\n\n\nMar 13\nMidterm Due\n\n\nMar 25\nReshaping Data\n\n\nMar 27\nReshaping Data\n\n\nApr 1\nJoining Data\n\n\nApr 3\nJoining Data\n\n\nApr 8\nDates and Times\n\n\nApr 10\nDates and Times\n\n\nApr 15\nProject Work\n\n\nApr 17\nProject Work\n\n\nApr 22\nLists\n\n\nApr 24\nLists\n\n\nApr 29\nProject Work\n\n\nMay 1\nScreencast Video Due\n\n\nMay 6\nSpatial Data\n\n\nMay 8\nPeer Review of Screencast Due\n\n\nMay 14\nScheduled Final"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#grades",
    "href": "slides/01-Syllabus-and-Introductions.html#grades",
    "title": "Introduction",
    "section": "Grades",
    "text": "Grades\n\n\n\nAssignments\nWeight\n\n\n\n\nReading Quizzes\n10%\n\n\nWeekly Homework & Participation\n50%\n\n\nMidterm Exam\n20%\n\n\nProject\n20%\n\n\n\nApproximately Weekly Homework – started in class"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#academic-integrity-policy",
    "href": "slides/01-Syllabus-and-Introductions.html#academic-integrity-policy",
    "title": "Introduction",
    "section": "Academic Integrity Policy",
    "text": "Academic Integrity Policy\n\nYou may (should!) work with each other on homework assignments\nWork alone on exams\nYou must be able to explain anything you submit\nAt my discretion, I can use a one-on-one discussion of your work to replace the grade for that work.\nChatGPT, StackOverflow, Google are tools, but they do not help you think"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#install-course-software",
    "href": "slides/01-Syllabus-and-Introductions.html#install-course-software",
    "title": "Introduction",
    "section": "Install Course Software",
    "text": "Install Course Software\nTextbook Chapter 2"
  },
  {
    "objectID": "slides/01-Syllabus-and-Introductions.html#next-time",
    "href": "slides/01-Syllabus-and-Introductions.html#next-time",
    "title": "Introduction",
    "section": "Next Time",
    "text": "Next Time\nWe’ll work on Version Control with Git\n\n\nPlease read before class:\n\nComputer Basics\nScripts and Notebooks\nRStudio’s Interface\nVersion Control with Git\n\n\n\n\n\nOctocat Image Source"
  },
  {
    "objectID": "project/Dataset-Topics.html",
    "href": "project/Dataset-Topics.html",
    "title": "Project Dataset and Topics",
    "section": "",
    "text": "Link to dataset\nThings you plan to investigate using this dataset:\n\nThing 1\nThing 2\nThing 3\n\nStat 251 topics you plan to cover during the analysis:\n\nTopic 1\nTopic 2\nTopic 3\nTopic 4"
  },
  {
    "objectID": "homework/12-spatial.html",
    "href": "homework/12-spatial.html",
    "title": "Programming with GIS Data",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom."
  },
  {
    "objectID": "homework/12-spatial.html#drug-distribution",
    "href": "homework/12-spatial.html#drug-distribution",
    "title": "Programming with GIS Data",
    "section": "1.1 Drug Distribution",
    "text": "1.1 Drug Distribution\nSkim the PDFs included in the data folder before you start.\nBuhaug, Halvard & Päivi Lujala 2005. Accounting for Scale: Measuring Geography in Quantitative Studies of Civil War. Political Geography 24: 399-418.\nData downloaded from http://www.paivilujala.com/drugdata.html"
  },
  {
    "objectID": "homework/12-spatial.html#lord-of-the-rings---middle-earth",
    "href": "homework/12-spatial.html#lord-of-the-rings---middle-earth",
    "title": "Programming with GIS Data",
    "section": "1.2 Lord of the Rings - Middle Earth",
    "text": "1.2 Lord of the Rings - Middle Earth\nhttps://scholarworks.wm.edu/asoer/3/\nVector Shapefiles contained in the data/Middle Earth folder."
  },
  {
    "objectID": "homework/12-spatial.html#natural-earth-data",
    "href": "homework/12-spatial.html#natural-earth-data",
    "title": "Programming with GIS Data",
    "section": "1.3 Natural Earth Data",
    "text": "1.3 Natural Earth Data\nDownload data from https://www.naturalearthdata.com/downloads/10m-physical-vectors/\nUse at least 3 different data sets to create a map showing features that you are interested in."
  },
  {
    "objectID": "homework/10-datetime.html",
    "href": "homework/10-datetime.html",
    "title": "Dates and Times",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom.\nimport pandas as pd\nimport datetime\nNote: This assignment is modified from the decodeR exercises by Kelly Bodwin."
  },
  {
    "objectID": "homework/10-datetime.html#warm-up-exercises",
    "href": "homework/10-datetime.html#warm-up-exercises",
    "title": "Dates and Times",
    "section": "1 Warm-up exercises",
    "text": "1 Warm-up exercises\n(Do this in R AND python)\nAnswer the following using code (even if you know the answer already).\n\nSave your birthday as a Datetime object.\n\nWhat day of the week does/did your birthday fall on in 2019?\nOn what day of the week should you plan your 100th birthday party?\nFind the date that is exactly 9 months before your birthday. If it falls on a holiday, think about the implications.\nThe following code loads a dataset giving the date ranges for the 12 Zodiac signs. By making appropriate adjustments and calculations, find your Zodiac sign.\n\n\nzodiac &lt;- read.csv(\"https://raw.githubusercontent.com/unl-stat251/09-datetime/main/zodiac.csv\")\n\n# Birthday saved as a datetime object\n\n# Day of the week your birthday fell on in 2019\n\n# Day of the week of your 100th birthday party\n\n# Date that is 9 months before your birthday\n\n# Zodiac sign\n\n\nzodiac = pd.read_csv(\"https://raw.githubusercontent.com/unl-stat251/09-datetime/main/zodiac.csv\")\n\n# Birthday saved as a datetime object\n\n# Day of the week your birthday fell on in 2019\n\n# Day of the week of your 100th birthday party\n\n# Date that is 9 months before your birthday\n\n# Zodiac sign"
  },
  {
    "objectID": "homework/10-datetime.html#solve-the-mystery",
    "href": "homework/10-datetime.html#solve-the-mystery",
    "title": "Dates and Times",
    "section": "2 Solve the mystery",
    "text": "2 Solve the mystery\n(Do this in R or Python, but you don’t have to do it in both)\nSpeaking of the Zodiac, one of the most famous mysteries in California history is the identity of the so-called “Zodiac Killer”, who murdered 7 people in Northern California between 1968 and 1969.\nA new murder was committed last year in California, suspected to be the work of a new Zodiac Killer on the loose. Fortunately, a camera was planted at the location where the body was found. The FBI has provided you with a list of people who entered the building last year, and what date and time they entered, in Pacific Standard Time (PST).\n\nsuspects &lt;- read.csv(\"https://raw.githubusercontent.com/unl-stat251/09-datetime/main/suspects.csv\")\n\nUnfortunately, the date and time of the murder is not known. You have been hired to crack the case. Use the clues below to discover the murderer’s identity.\n\nBased on the sunburn patterns on the body, the murder was not committed in the morning.\nThe room where the murder was committed is closed Tuesdays and Thursdays, so the murder did not happen on those days.\nIt is believed that the murder was committed within 5 weeks (35 days) of Thanksgiving, 2018.\nIt was discovered that just before being murdered, the victim tried to send a text to her sister in Iceland, saying “Goodnight over there!”\nThe Killer left behind a birthday card at the scene of the crime. The date is smudged, but the number of the day is shown to be 22. It is thought that perhaps this murder took place less than two days after the Killer’s birthday.\nThe Killer him/herself is amused by our efforts, and he has sent us a cryptic clue: “The number of minutes between Jan 1, 1970 at midnight and the time I arrived on the scene is divisible by 10.”\n\nWho is the killer?"
  },
  {
    "objectID": "homework/08-reshape.html",
    "href": "homework/08-reshape.html",
    "title": "Data Reshaping with Puppies",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom.\n\nSetting up\nIn this assignment, we’ll work with American Kennel Club data on dog breeds.\nData information\nRead in the CSV files provided:\n\nbreed_traits\ntrait_description\nbreed_rank\n\n\n# Read in the data\n\nThis assignment will ask you to sketch the layout of various datasets. If you want, you can use paper/pencil sketches, but the images should be provided in PNG or JPEG format and included in your document as images. If you prefer a digital tool, Excalidraw.com is an excellent (free) option.\n\n\n1 Breed Traits\nIs the breed_traits.csv file in tidy form? Why or why not?\nIf you wanted to plot the distribution of rankings for each trait, with each trait’s distribution in a separate facet, what form would you need to use for the data?\nSketch the form the data would look like to create the necessary plot, and include the image of that sketch here.\nWhat transformations are necessary for the data to be converted into this form? Include a sketch of the transformation process.\nTransform the data and generate a plot showing the distribution of breed rankings for the variables Affectionate With Family, Good with Young Children, Good With Other Dogs, Playfulness Level, and Trainability Level. Each variable should have its own facet.\n\n# Transformation code here\n\n\n# Plot code here\n\n\n\n2 Breed Ranks\nIs the breed_rank_all.csv file in tidy form? Why or why not?\nIf you wanted to plot the popularity of Beagles and Jack Russell Terriers between 2013 and 2020, what form would you need the data to be in?\nSketch the form the data would look like to create the necessary plot, and include the image of that sketch here.\nWhat transformations are necessary for the data to be converted into this form? Include a sketch of the transformation process.\nChoose two dog breeds that you are interested in and generate a line chart showing the breeds’ relative popularity between 2013 and 2020. Breed should be indicated by color as well as linetype (so that your plot is double encoded).\n\n# Transformation code here\n\n\n# Plot code here"
  },
  {
    "objectID": "homework/06-data-manip.html",
    "href": "homework/06-data-manip.html",
    "title": "Homework 6: Data Manipulation",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom.\ncp ../homework-repos/06-data-manip/gapminder_data.csv .\nco2_sum &lt;- data.frame() # This is here to be a blank data frame so that the \n                        # lines below work before you've filled your code in.\nThe Gapminder project’s mission is to fight devastating ignorance with a fact-based worldview everyone can understand. To do this, they assemble reliable data about a variety of global variables to help educate the general public.\nI have collected data from Gapminder about several variables:\nUse the data manipulation tools you’ve learned about to answer each of the following questions, which I’ve grouped into several general topics. Some questions may specify a specific language to use; if no language is specified, you may choose whether to use R or python to answer the question."
  },
  {
    "objectID": "homework/06-data-manip.html#read-in-the-data",
    "href": "homework/06-data-manip.html#read-in-the-data",
    "title": "Homework 6: Data Manipulation",
    "section": "Read In the Data",
    "text": "Read In the Data\nRead in the data in R and Python. In both languages, store the table in the variable gapminder."
  },
  {
    "objectID": "homework/06-data-manip.html#data-exploration",
    "href": "homework/06-data-manip.html#data-exploration",
    "title": "Homework 6: Data Manipulation",
    "section": "Data Exploration",
    "text": "Data Exploration\n\nMissingness\nGapminder puts a lot of effort into curating certain variables; other variables are less frequently used (or are harder to assemble from reliable sources).\n\nCO2\nCreate a table of all countries with at least 30 observations CO2. Your table should be called co2_sum and should have columns country and n_obs. Do not print out the table; instead, if you have done everything correctly, when your document is compiled the correct number of countries will be filled in in the sentence below the code chunk.\n\nThere are 0 countries with at least 30 years of CO2 data.\n\n\nEnergy\nAnswer in Python\n\n\nIncome\n\n\nGDP\n\nrm ./gapminder_data.csv"
  },
  {
    "objectID": "homework/04-cookies.html",
    "href": "homework/04-cookies.html",
    "title": "Chocolate Chip Cookies",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom."
  },
  {
    "objectID": "homework/04-cookies.html#reading-in-the-data",
    "href": "homework/04-cookies.html#reading-in-the-data",
    "title": "Chocolate Chip Cookies",
    "section": "Reading In the Data",
    "text": "Reading In the Data\nFirst, read in the CSV data of cookie ingredients. Make sure that your end-result data has appropriate types for each column - these should match the types provided in the documentation in the README.md file."
  },
  {
    "objectID": "homework/04-cookies.html#exploratory-data-analysis",
    "href": "homework/04-cookies.html#exploratory-data-analysis",
    "title": "Chocolate Chip Cookies",
    "section": "Exploratory Data Analysis",
    "text": "Exploratory Data Analysis\nExploratory data analysis is the process of getting familiar with your dataset. To get started, this blog post provides a nice checklist to get you thinking:\n\n\nWhat question(s) are you trying to solve (or prove wrong)?\nWhat kind of data do you have and how do you treat different types?\nWhat’s missing from the data and how do you deal with it?\nWhere are the outliers and why should you care about them?\nHow can you add, change or remove features to get more out of your data?\n\n\n\nGenerating Questions\nGenerate at least 5 questions you might explore using this database of cookie ingredients.\n\n\n\n\n\n\n\n\n\nSkimming the Data\nOne thing we often want to do during EDA is to examine the quality of the data - are there missing values? What quirks might exist in the dataset?\nThe skimr package in R, and the similar skimpy package in python (which has a much better name, in my opinion), can help provide visual summaries of the data.\nInstall both packages, and read the package documentation (R, Python).\n[Part 1] Use each package and generate summaries of your data that require the use of at least some non-default options in each package’s skim function.\n[Part 2] Write 1-2 sentences about what you can tell from each summary display you generate. Did you discover anything new about the data?\n\n\nGenerating Tables\nAnother useful technique for exploratory data analysis is to generate summary tables. You may want to use the dplyr package in R (group_by or count functions), as well as the groupby and count methods in Pandas. Python example, R example\n[Part 1] Using R and Python, generate a table that shows what proportion of recipes contain each type of ingredient, for the most common 20 ingredients.\n[Part 2] Print out a character string that lists all of the ingredients that do not appear in at least 20 recipes.\n(Delete this note, but you can include data values inline in markdown text by using backticks, at least in R. For instance, here is R’s built in value for pi: 3.1415927. Unfortunately, this doesn’t work in python using the knitr markdown engine, but you can print the list out in python anyways using a code chunk.)\n\n\nVisualization\nUsing whatever plotting system you are comfortable with in R or python, see if you can create a couple of useful exploratory data visualizations which address one of the questions you wrote above - or another question which you’ve come up with as you’ve worked on this assignment.\n[Part 1] Create at least one plot (it doesn’t have to be pretty) that showcases an interesting facet of the data.\n[Part 2] Write 2-3 sentences about what you can learn from that plot and what directions you might want to investigate from here."
  },
  {
    "objectID": "homework/02-review.html",
    "href": "homework/02-review.html",
    "title": "Homework 2: Reviewing R and Python",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom.\nA palindrome is a string that is equal to the reverse of that string, such as “Mom”, “Hannah” or “We panic in a pew.”\nTraditionally, a phrase is tested for being a palindrome once all spaces and punctuation has been removed, and all letters are written in the same case. You will need to think about how to do these tasks in R and python."
  },
  {
    "objectID": "homework/02-review.html#pseudocode",
    "href": "homework/02-review.html#pseudocode",
    "title": "Homework 2: Reviewing R and Python",
    "section": "Pseudocode",
    "text": "Pseudocode\nWrite a detailed list of steps to process a string named test to test that it is a palindrome.\nYou may find it helpful to write down some test words and work through them as if you were an algorithm. If you do this, please take a picture of your scratch paper, put it in the homework directory, and add it to your git repository along with your assignment solution.\nHint: The final items in this list of steps should be defining a variable revtest that is test with the letters reversed, and then comparing test and revtest for equality."
  },
  {
    "objectID": "homework/02-review.html#r",
    "href": "homework/02-review.html#r",
    "title": "Homework 2: Reviewing R and Python",
    "section": "R",
    "text": "R\nTurn your pseudocode into a sequence of statements in R that work with a variable named test. At this point, there is no need to write these steps in a function - we’ll get there.\n\ntest &lt;- \"Hannah\"\ntest2 &lt;- \"not-a-palindrome\"\n\n# Your steps go here"
  },
  {
    "objectID": "homework/02-review.html#python",
    "href": "homework/02-review.html#python",
    "title": "Homework 2: Reviewing R and Python",
    "section": "Python",
    "text": "Python\nTurn your pseudocode into a sequence of statements in python that work with a variable named test. At this point, there is no need to write these steps in a function - we’ll get there.\n\ntest = \"Hannah\"\ntest2 = \"not-a-palindrome\"\n\n# Your steps go here"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Stat 251: Data Wrangling",
    "section": "",
    "text": "Course Materials\nDates shown are due dates (for homework and exams) and dates on which material was presented (for slides).\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nDate\n\n\nTitle\n\n\nType\n\n\n\n\n\n\n\n\nMay 8, 2025\n\n\nProgramming with GIS Data\n\n\nhomework\n\n\n\n\n\n\n\nMay 1, 2025\n\n\nScreencast Checklist\n\n\nproject\n\n\n\n\n\n\n\nApr 29, 2025\n\n\nDrawing beautiful maps with R - Part 1 - Basics\n\n\nreading\n\n\n\n\n\n\n\nApr 29, 2025\n\n\nDrawing beautiful maps with R - Part 2 - Layers\n\n\nreading\n\n\n\n\n\n\n\nApr 29, 2025\n\n\nDrawing beautiful maps with R - Part 3 - Layouts\n\n\nreading\n\n\n\n\n\n\n\nApr 29, 2025\n\n\nCreate beautiful maps with Python\n\n\nreading\n\n\n\n\n\n\n\nApr 24, 2025\n\n\nFunctional Programming: Cats and Dogs\n\n\nhomework\n\n\n\n\n\n\n\nApr 24, 2025\n\n\nFunctioning Cats and Dogs\n\n\n \n\n\n\n\n\n\n\nApr 22, 2025\n\n\nScreencast Pseudocode\n\n\nproject\n\n\n\n\n\n\n\nApr 17, 2025\n\n\nDates and Times\n\n\nhomework\n\n\n\n\n\n\n\nApr 17, 2025\n\n\nLast 4 weeks\n\n\n \n\n\n\n\n\n\n\nApr 15, 2025\n\n\nProject Dataset and Topics\n\n\nproject\n\n\n\n\n\n\n\nApr 15, 2025\n\n\nProject: Screencast\n\n\nproject\n\n\n\n\n\n\n\nApr 15, 2025\n\n\nProject Overview\n\n\n \n\n\n\n\n\n\n\nApr 15, 2025\n\n\nScreencast - edited script\n\n\n \n\n\n\n\n\n\n\nApr 15, 2025\n\n\nFunctional Programming and Lists\n\n\nreading\n\n\n\n\n\n\n\nApr 10, 2025\n\n\nHomework 9: Murder in SQL City\n\n\nhomework\n\n\n\n\n\n\n\nApr 8, 2025\n\n\nJoin up, Detectives!\n\n\n \n\n\n\n\n\n\n\nApr 8, 2025\n\n\nDates and Times\n\n\nreading\n\n\n\n\n\n\n\nApr 3, 2025\n\n\nData Reshaping with Puppies\n\n\nhomework\n\n\n\n\n\n\n\nApr 3, 2025\n\n\nMurder tables!?\n\n\n \n\n\n\n\n\n\n\nApr 1, 2025\n\n\nReshaping Dogs\n\n\n \n\n\n\n\n\n\n\nApr 1, 2025\n\n\nJoining Data\n\n\nreading\n\n\n\n\n\n\n\nMar 27, 2025\n\n\nString Processing and Data Wrangling in R and Python\n\n\nhomework\n\n\n\n\n\n\n\nMar 27, 2025\n\n\nRegular Expressions\n\n\n \n\n\n\n\n\n\n\nMar 25, 2025\n\n\nWorking with Strings\n\n\n \n\n\n\n\n\n\n\nMar 25, 2025\n\n\nStrings\n\n\nreading\n\n\n\n\n\n\n\nMar 25, 2025\n\n\nReshaping Data\n\n\nreading\n\n\n\n\n\n\n\nMar 13, 2025\n\n\nMidterm\n\n\nexam\n\n\n\n\n\n\n\nMar 6, 2025\n\n\nHomework 6: Data Manipulation\n\n\nhomework\n\n\n\n\n\n\n\nMar 4, 2025\n\n\nPractice Exam (2023)\n\n\nexam\n\n\n\n\n\n\n\nMar 4, 2025\n\n\nExam objectives\n\n\nexam\n\n\n\n\n\n\n\nMar 4, 2025\n\n\nGood programming practices\n\n\n \n\n\n\n\n\n\n\nFeb 27, 2025\n\n\nComputing with data\n\n\n \n\n\n\n\n\n\n\nFeb 25, 2025\n\n\nHomework 5: Graphics\n\n\nhomework\n\n\n\n\n\n\n\nFeb 25, 2025\n\n\nData Cleaning\n\n\nreading\n\n\n\n\n\n\n\nFeb 24, 2025\n\n\nSurvey Results and Groundhog Graphics\n\n\n \n\n\n\n\n\n\n\nFeb 20, 2025\n\n\nCreating Good Graphics\n\n\n \n\n\n\n\n\n\n\nFeb 18, 2025\n\n\nChocolate Chip Cookies\n\n\nhomework\n\n\n\n\n\n\n\nFeb 18, 2025\n\n\nFinishing up Cookie Exploration\n\n\n \n\n\n\n\n\n\n\nFeb 18, 2025\n\n\nData Visualization\n\n\nreading\n\n\n\n\n\n\n\nFeb 18, 2025\n\n\nGood Graphics\n\n\nreading\n\n\n\n\n\n\n\nFeb 13, 2025\n\n\nData Explorations\n\n\n \n\n\n\n\n\n\n\nFeb 11, 2025\n\n\ndecodeR: Base R\n\n\nhomework\n\n\n\n\n\n\n\nFeb 11, 2025\n\n\nReading In Data\n\n\n \n\n\n\n\n\n\n\nFeb 11, 2025\n\n\nData Input\n\n\nreading\n\n\n\n\n\n\n\nFeb 11, 2025\n\n\nExploratory Data Analysis\n\n\nreading\n\n\n\n\n\n\n\nFeb 6, 2025\n\n\nReview - Cipher\n\n\n \n\n\n\n\n\n\n\nFeb 4, 2025\n\n\nHomework 2: Reviewing R and Python\n\n\nhomework\n\n\n\n\n\n\n\nFeb 4, 2025\n\n\nReview - Cipher\n\n\n \n\n\n\n\n\n\n\nJan 30, 2025\n\n\nProgramming Review\n\n\nslides\n\n\n\n\n\n\n\nJan 28, 2025\n\n\n👋 The Basics of GitHub\n\n\nhomework\n\n\n\n\n\n\n\nJan 28, 2025\n\n\nProgramming Review\n\n\nslides\n\n\n\n\n\n\n\nJan 28, 2025\n\n\nVersion Control with Git and Github\n\n\nreading\n\n\n\n\n\n\n\nJan 28, 2025\n\n\nReview - Programming\n\n\nreading\n\n\n\n\n\n\n\nJan 23, 2025\n\n\nVersion Control\n\n\nslides\n\n\n\n\n\n\n\nJan 23, 2025\n\n\nReview - Tools\n\n\nreading\n\n\n\n\n\n\n\nJan 21, 2025\n\n\nIntroduction\n\n\nslides\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "homework/01-git-github.html",
    "href": "homework/01-git-github.html",
    "title": "👋 The Basics of GitHub",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom."
  },
  {
    "objectID": "homework/01-git-github.html#course-overview-and-learning-outcomes",
    "href": "homework/01-git-github.html#course-overview-and-learning-outcomes",
    "title": "👋 The Basics of GitHub",
    "section": "🤓 Course overview and learning outcomes",
    "text": "🤓 Course overview and learning outcomes\nThe goal of this course is to give you a brief introduction to GitHub. We’ll also provide you with materials for further learning and a few ideas to get you started on our platform. 🚀"
  },
  {
    "objectID": "homework/01-git-github.html#git-and-github",
    "href": "homework/01-git-github.html#git-and-github",
    "title": "👋 The Basics of GitHub",
    "section": "Git and GitHub",
    "text": "Git and GitHub\nGit is a distributed Version Control System (VCS), which means it is a useful tool for easily tracking changes to your code, collaborating, and sharing. With Git you can track the changes you make to your project so you always have a record of what you’ve worked on and can easily revert back to an older version if need be. It also makes working with others easier—groups of people can work together on the same project and merge their changes into one final source!\nGitHub is a way to use the same power of Git all online with an easy-to-use interface. It’s used across the software world and beyond to collaborate and maintain the history of projects.\nGitHub is home to some of the most advanced technologies in the world. Whether you’re visualizing data or building a new game, there’s a whole community and set of tools on GitHub that can get you to the next step. This course starts with the basics of GitHub, but we’ll dig into the rest later."
  },
  {
    "objectID": "homework/01-git-github.html#understanding-the-github-flow",
    "href": "homework/01-git-github.html#understanding-the-github-flow",
    "title": "👋 The Basics of GitHub",
    "section": "Understanding the GitHub flow",
    "text": "Understanding the GitHub flow\nThe GitHub flow is a lightweight workflow that allows you to experiment and collaborate on your projects easily, without the risk of losing your previous work.\n\nRepositories\nA repository is where your project work happens–think of it as your project folder. It contains all of your project’s files and revision history. You can work within a repository alone or invite others to collaborate with you on those files.\n\n\nCloning\nWhen a repository is created with GitHub, it’s stored remotely in the ☁️. You can clone a repository to create a local copy on your computer and then use Git to sync the two. This makes it easier to fix issues, add or remove files, and push larger commits. You can also use the editing tool of your choice as opposed to the GitHub UI. Cloning a repository also pulls down all the repository data that GitHub has at that point in time, including all versions of every file and folder for the project! This can be helpful if you experiment with your project and then realize you liked a previous version more. To learn more about cloning, read “Cloning a Repository”.\n\n\nCommitting and pushing\nCommitting and pushing are how you can add the changes you made on your local machine to the remote repository in GitHub. That way your instructor and/or teammates can see your latest work when you’re ready to share it. You can make a commit when you have made changes to your project that you want to “checkpoint.” You can also add a helpful commit message to remind yourself or your teammates what work you did (e.g. “Added a README with information about our project”).\nOnce you have a commit or multiple commits that you’re ready to add to your repository, you can use the push command to add those changes to your remote repository. Committing and pushing may feel new at first, but we promise you’ll get used to it 🙂"
  },
  {
    "objectID": "homework/01-git-github.html#github-terms-to-know",
    "href": "homework/01-git-github.html#github-terms-to-know",
    "title": "👋 The Basics of GitHub",
    "section": "💻 GitHub terms to know",
    "text": "💻 GitHub terms to know\n\nRepositories\nWe mentioned repositories already, they are where your project work happens, but let’s talk a bit more about the details of them! As you work more on GitHub you will have many repositories which may feel confusing at first. Fortunately, your “GitHub dashboard” helps to easily navigate to your repositories and see useful information about them. Make sure you’re logged in to see it!\nRepositories also contain READMEs. You can add a README file to your repository to tell other people why your project is useful, what they can do with your project, and how they can use it. We are using this README to communicate how to learn Git and GitHub with you. 😄 To learn more about repositories read “Creating, Cloning, and Archiving Repositories and “About README’s”.\n\n\nBranches\nYou can use branches on GitHub to isolate work that you do not want merged into your final project just yet. Branches allow you to develop features, fix bugs, or safely experiment with new ideas in a contained area of your repository. Typically, you might create a new branch from the default branch of your repository—main. This makes a new working copy of your repository for you to experiment with. Once your new changes have been reviewed by a teammate, or you are satisfied with them, you can merge your changes into the default branch of your repository. To learn more about branching, read “About Branches”.\nNote: In this class, you will not be required to use branches.\n\n\nForks\nA fork is another way to copy a repository, but is usually used when you want to contribute to someone else’s project. Forking a repository allows you to freely experiment with changes without affecting the original project and is very popular when contributing to open source software projects! To learn more about forking, read “Fork a repo”\nNote: In this class, you will not be required to use forks.\n\n\nPull requests\nWhen working with branches, you can use a pull request to tell others about the changes you want to make and ask for their feedback. Once a pull request is opened, you can discuss and review the potential changes with collaborators and add more changes if need be. You can add specific people as reviewers of your pull request which shows you want their feedback on your changes! Once a pull request is ready-to-go, it can be merged into your main branch. To learn more about pull requests, read “About Pull Requests”.\nNote: In this course, you will not be required to use pull requests.\n\n\nIssues\nIssues are a way to track enhancements, tasks, or bugs for your work on GitHub. Issues are a great way to keep track of all the tasks you want to work on for your project and let others know what you plan to work on. You can also use issues to tell a favorite open source project about a bug you found or a feature you think would be great to add!\nFor larger projects, you can keep track of many issues on a project board. GitHub Projects help you organize and prioritize your work and you can read more about them in this “About Project boards document. You likely won’t need a project board for your assignments, but once you move on to even bigger projects, they’re a great way to organize your team’s work! You can also link together pull requests and issues to show that a fix is in progress and to automatically close the issue when someone merges the pull request. To learn more about issues and linking them to your pull requests, read “About Issues”.\n\n\nYour user profile\nYour profile page tells people the story of your work through the repositories you’re interested in, the contributions you’ve made, and the conversations you’ve had. You can also give the world a unique view into who you are with your profile README. You can use your profile to let future employers know all about you! To learn more about your user profile and adding and updating your profile README, read “Managing Your Profile README”.\n\n\nUsing markdown on GitHub\nYou might have noticed already, but you can add some fun styling to your issues, pull requests, and files. “Markdown” is an easy way to style your issues, pull requests, and files with some simple syntax. This can be helpful to organize your information and make it easier for others to read. You can also drop in gifs and images to help convey your point! To learn more about using GitHub’s flavor of markdown, read “Basic Writing and Formatting Syntax”.\n\n\nEngaging with the GitHub community\nThe GitHub community is vast. There are many types of people who use GitHub in their day to day—students like you, professional developers, hobbyists working on open source projects, and explorers who are just jumping into the world of software development on their own. There are many ways you can interact with the larger GitHub community, but here are three places where you can start.\n\nStarring repositories\nIf you find a repository interesting or you want to keep track of it, star it! When you star a repository it’s also used as a signal to surface better recommendations on github.com/explore. If you’d like to get back to your starred repositories you can do so via your user profile. To learn more about starring repositories, read “Saving Repositories with Stars”.\n\n\nFollowing users\nYou can follow people on GitHub to receive notifications about their activity and discover projects in their communities. When you follow a user, their public GitHub activity will show up on your dashboard so you can see all the cool things they are working on. To learn more about following users, read “Following People”.\n\n\nBrowsing GitHub Explore\nGitHub Explore is a great place to do just that … explore :smile: You can find new projects, events, and developers to interact with.\nYou can check out the GitHub Explore website at github.com/explore. The more you intereact with GitHub the more tailored your Explore view will be."
  },
  {
    "objectID": "homework/01-git-github.html#next-steps",
    "href": "homework/01-git-github.html#next-steps",
    "title": "👋 The Basics of GitHub",
    "section": "📝 Next steps",
    "text": "📝 Next steps\n\nClone this repository to your local machine\nOn your local machine, create a new markdown file in this repository named ‘About_Me.md’. Provide a short biography/introduction for yourself and use markdown formatting\n\nMarkdown Basics provides an overview of different formatting options in markdown.\nYou must use at least the following formatting elements: header, subheader, bold or italic, bulleted list, and an image.\n\nCommit your changes to your new file locally and push them back to your github repository. Check on Github to make sure the new file appears.\nTo get full credit for your assignment, you will need to have worked with your git repository locally. I will be able to see if you have used the github editor to make your changes instead :)."
  },
  {
    "objectID": "homework/01-git-github.html#resources",
    "href": "homework/01-git-github.html#resources",
    "title": "👋 The Basics of GitHub",
    "section": "📚 Resources",
    "text": "📚 Resources\n\nA short video explaining what GitHub is\nGit and GitHub learning resources\nUnderstanding the GitHub flow\nHow to use GitHub branches\nInteractive Git training materials\nGitHub’s Learning Lab\nEducation community forum\nGitHub community forum"
  },
  {
    "objectID": "homework/01-git-github.html#optional-extra-steps",
    "href": "homework/01-git-github.html#optional-extra-steps",
    "title": "👋 The Basics of GitHub",
    "section": "Optional extra steps",
    "text": "Optional extra steps\n\nOpen a pull request and let your teacher know that you’ve finished this course.\n\nCreate your profile README. Let the world know a little bit more about you! What are you interested in learning? What are you working on? What’s your favorite hobby? Learn more about creating your profile README in the document, “Managing Your Profile README”.\nGo to your user dashboard and create a new repository. Experiment with the features within that repository to familiarize yourself with them.\nLet us know what you liked or didn’t like about the content of this course. What would you like to see more of? What would be interesting or helpful to your learning journey?"
  },
  {
    "objectID": "homework/03-cipher.html",
    "href": "homework/03-cipher.html",
    "title": "decodeR: Base R",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom.\nThis assignment is modified from the decodeR exercises by Kelly Bodwin and Allison Theobold.\nIn this assignment, you will be creating and manipulating vectors, lists, and data frames to uncover a top secret message.\nSome advice:"
  },
  {
    "objectID": "homework/03-cipher.html#part-one-setup",
    "href": "homework/03-cipher.html#part-one-setup",
    "title": "decodeR: Base R",
    "section": "Part One: Setup",
    "text": "Part One: Setup\nEach of the following R chunks will cause an error and/or do the desired task incorrectly. Find the mistake, and correct it to complete the intended action. For each error, write 1-2 sentences to reflect on what the mistake was and how you found it and fixed it.\n\nCreate vectors containing the upper case letters, lower case letters, and some punctuation marks.\n\n\nlower_case &lt;- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n\nupper_case &lt;- c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\" \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\")\n\npunctuation &lt;- c(\".\", \",\", \"!\", \"?\", \"'\", \"\"\", \"(\", \")\", \" \", \"-\", \";\", \":\")\n\n\nMake one long vector containing all the symbols.\n\n\nmy_symbols &lt;- cbind(lower_case, upper_case, punctuation)\n\n\nTurn the my_symbols vector into a data frame, with the variable name “Symbol”\n\n\nmy_symbols &lt;- dataframe(my_symbols)\nnames(my_symbols) = Symbol\n\n\nFind the total number of symbols we have in our data frame.\n\n\nlen &lt;- length(my_symbols)\n\n\nCreate a new variable in your dataframe that assigns a number to each symbol.\n\n\nmy_symbols%Num &lt;- 1:len"
  },
  {
    "objectID": "homework/03-cipher.html#part-two-decoding-the-secret-message.",
    "href": "homework/03-cipher.html#part-two-decoding-the-secret-message.",
    "title": "decodeR: Base R",
    "section": "Part Two: Decoding the secret message.",
    "text": "Part Two: Decoding the secret message.\nThis chunk will load up the encoded secret message as a vector:\n\ntop_secret &lt;- read.csv(\"Secret_Code\", header = FALSE)$V1\n\nBy altering this top secret set of numbers, you will be able to create a message. Write your own code to complete the steps below.\n\nAdd 14 to every number.\nMultiply every number by 18, then subtract 257.\nExponentiate every number. (That is, do e^[number].)\nSquare every number.\n\nCheckpoint: Headquarters has informed you that at this stage of decoding, there should be 352 numbers in the secret message that are below 17.\n\nTurn your vector of numbers into a matrix with 5 columns.\nSeparately from your top secret numbers, create a vector of all the even numbers between 1 and 382. Name it “evens”. That is, “evens” should contain 2, 4, 6, 8 …, 382.\nSubtract the “evens” vector from the first column of your secret message matrix.\nSubtract 100 from all numbers in the 18-24th rows of the 3rd column.\nMultiply all numbers in the 4th and 5th column by 2.\nTurn your matrix back into a vector.\n\nCheckpoint: Headquarters has informed you that at this stage of decoding, all numbers in indices 500 and beyond are below 100.\n\nTake the square root of all numbers in indices 38 to 465.\nRound all numbers to the nearest whole number.\nReplace all instances of the number 39 with 20.\n\nCheckpoint: Headquarters has informed you that your final message should have 344 even numbers."
  },
  {
    "objectID": "homework/03-cipher.html#part-3-the-secret-message",
    "href": "homework/03-cipher.html#part-3-the-secret-message",
    "title": "decodeR: Base R",
    "section": "Part 3: The secret message!",
    "text": "Part 3: The secret message!\nUse your final vector of numbers as indices for my_symbols to discover the final message!\nGoogle the first line of this message, if you do not recognize it, to see what it is.\nWrite 3-4 sentences about what you learned from this investigation. What problems did you encounter, and how did you solve them? Could you do the same tasks in Python? Why or why not?"
  },
  {
    "objectID": "homework/05-graphics-groundhogs.html",
    "href": "homework/05-graphics-groundhogs.html",
    "title": "Homework 5: Graphics",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom."
  },
  {
    "objectID": "homework/05-graphics-groundhogs.html#data-exploration",
    "href": "homework/05-graphics-groundhogs.html#data-exploration",
    "title": "Homework 5: Graphics",
    "section": "Data Exploration",
    "text": "Data Exploration\nOne extremely important use of charts is to explore new datasets. In order to get the most out of a dataset, however, it is important to use a chart that is suited to the type of data: a density plot will not work well for showing categorical data, for instance.\nFor each variable in the groundhogs data that contains useful information, find an appropriate plot for the data. You may show more than one variable in a single plot (latitude and longitude should probably be shown together). You may use either R or python for this task.\ngroundhogs.csv\n\nlat, long\ncountry\nisGroundhog\nactive\npredictionsCount\n\npredictions.csv\n\nisGroundhog\nyear\nshadow\n\nFor each plot you draw, write 1-2 sentences explaining what you can learn from the plot.\n\nThis plot shows…"
  },
  {
    "objectID": "homework/05-graphics-groundhogs.html#grammar-of-graphics",
    "href": "homework/05-graphics-groundhogs.html#grammar-of-graphics",
    "title": "Homework 5: Graphics",
    "section": "Grammar of Graphics",
    "text": "Grammar of Graphics\nThink of a good way to answer the following questions with a plot. For each plot, write 1-2 sentences explaining why you mapped each variable in the way that you did. Use ggplot2 for this portion of the assignment.\nYou may make editorial decisions here - it may be useful to only show groundhogs with 20 years of predictions, for instance. If you make such decisions, please explain why.\nYour charts must have appropriate axis labels and titles.\n\nDo different groundhogs have different probabilities of predicting 6 more weeks of winter?\n\nI mapped … to x and … to y because…\n\n\nHow much do North American groundhogs tend to agree on their predictions?\nDoes there appear to be any spatial covariance (that is, are groundhogs who are close together more likely to predict the same thing?)\n\nI mapped … to x and … to y because…"
  },
  {
    "objectID": "homework/05-graphics-groundhogs.html#ugly-chart-challenge",
    "href": "homework/05-graphics-groundhogs.html#ugly-chart-challenge",
    "title": "Homework 5: Graphics",
    "section": "Ugly Chart Challenge",
    "text": "Ugly Chart Challenge\nThe textbook spent lots of time showing you how to create different types of graphics, but I spent a lot less time showing you all of the different ways you could customize graphics in any plotting library. In this problem, I want you to create the ugliest graph you can, and then explain why, exactly, you made the decisions you did, and which principles of good graphics you’ve intentionally violated.\nUgliness is subjective, so the goal here is for you to explore the different ways you can customize the finer details of a plot. Make sure your finished masterpiece has appropriate axis labels and a title (after all, even ugly plots need to be correctly labeled!). You are free to add additional variables and layers, modify the aesthetics used, and leverage other packages. If you need inspiration, look here.\nUse the groundhog data to create the ugliest chart you possibly can, by violating as many guidelines for the creation of good graphics as possible.\nDo this for one plotting system in R, and one plotting system in Python. You might try different ways to make things ugly in each plotting system. Note that this dataset does include images of each groundhog, so feel free to leverage that in your plot, if you are so inspired.\nFor each plot, explain why the plot is ugly and what principles of good graphics it violates in 2-3 sentences.\n\nR\nThis chart is ugly because it violates …\n\n\nPython\nThis chart is ugly because it violates …"
  },
  {
    "objectID": "homework/07-strings.html",
    "href": "homework/07-strings.html",
    "title": "String Processing and Data Wrangling in R and Python",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom."
  },
  {
    "objectID": "homework/07-strings.html#content-warning",
    "href": "homework/07-strings.html#content-warning",
    "title": "String Processing and Data Wrangling in R and Python",
    "section": "Content Warning",
    "text": "Content Warning\nThese poems may address adult topics and/or use strong or vulgar language, as they are taken from Reddit. I have not censored them in any way because I want you to work with data that is realistic. You should find a few test cases which you are comfortable with to use to test out your code, but you do not need to read all of the poems (and in both cases, I’ve provided you with approximately 1000 samples, so it’s probably too much to read in any case).\nHere are 5 indices (counting from 1) which are approximately G or PG in content for each poet, using the most recent snapshot CSV (20230806):\n\nSprog poems: 2, 6, 7, 8, 9\nSchnoodleDoodleDo poems: 1, 2, 3, 4, 5\n\nThese should be sufficient for you to test your code even if you are worried about being exposed to adult themes or language during this activity."
  },
  {
    "objectID": "homework/07-strings.html#splitting-poems-into-lines",
    "href": "homework/07-strings.html#splitting-poems-into-lines",
    "title": "String Processing and Data Wrangling in R and Python",
    "section": "1.1 Splitting Poems into Lines",
    "text": "1.1 Splitting Poems into Lines\nSplit the poem into lines and create a data frame that has\n\na new column called poem_id, numbered from one to the total number of poems by the poet in question\na new variable called line that contains the text of each line of the poem (one row per poem line). To get this, you may need to split the comment string by the endline character (\\n) and then unnest or expand your data frame.\na new variable called line_no that contains the line number of the poem. This should be computed per poem.\n\nEnsure that you are splitting lines by a string which makes sense. Some poems have multiple paragraphs (stanzas) and may have a blank line in between; you want to preserve this blank line as it will help you make sense of the poem. Some poems instead have blank lines between every line of the poem; in these cases, you may want to split by e.g. \\n\\n instead of \\n.\nSee Part 1 Checkpoint for an example of what the output should look like from each poet."
  },
  {
    "objectID": "homework/07-strings.html#summarizing-poems",
    "href": "homework/07-strings.html#summarizing-poems",
    "title": "String Processing and Data Wrangling in R and Python",
    "section": "1.2 Summarizing Poems",
    "text": "1.2 Summarizing Poems\nFor each poem, create a summary data frame that contains:\n\nAverage number of words per line in the poem\nNumber of lines in the poem\nNumber of characters which are not letters or spaces (punctuation, numbers, and any non-ASCII characters)\nNumber of uppercase letters in the poem\nNumber of lowercase letters in the poem\n\nCreate a plot showing the distribution of the number of words per line across all poems you have in your dataset. Create another plot showing the number of lines in the poem for all poems in your dataset. What does this tell you about the “average” style of the poet in question?\nSee Part 2 Checkpoint for an example of what the output should look like from each poet."
  },
  {
    "objectID": "homework/07-strings.html#poetry-analysis",
    "href": "homework/07-strings.html#poetry-analysis",
    "title": "String Processing and Data Wrangling in R and Python",
    "section": "1.3 Poetry Analysis",
    "text": "1.3 Poetry Analysis\nChoose some characteristic(s) of the poet’s style to explore graphically. If necessary, create a subset of the data with poems relevant to your question before you generate numerical summaries. You may want to clean up the data and remove lines which contain quotes (e.g. start with a &gt; character) or horizontal lines in reddit markdown (e.g. only have ----).\nSome ideas to get you started thinking:\n\nNumber of syllables per line may be used to infer rhyming scheme and/or poetry style. You can use the qdap package in R, which contains the syllable_sum function to count the number of syllables in a sentence. You may need to use a for-loop or program a custom function to use the syllables function on every entry in your data frame column.\nUse of non-alphabetic characters. Schnoodle often uses emoji and other text annotations to convey emotions and excitement - how often do these types of annotations appear in their poems?\nCommon characters and phrases. Sprog writes poems frequently about a character named Timmy (who often meets a horrible end). Do these poems have a common format/style/rhyme scheme?\nSprog often writes longer poems with multiple stanzas. Identify which poems have multiple stanzas (Hint, look for blank lines in a systematic pattern) and show the distribution of stanza length, stanza variation within poems, and number of stanzas in each poem.\nSchnoodle often misspells words intentionally (using e.g. fren instead of friend) to convey that they are writing using an animal’s voice. What proportion of words are misspelled in each poem? How much does this proportion vary? Based on the distribution, how likely is it, in your opinion, that Schnoodle misspells words more often when speaking as one type of animal than another? You can use the hunspell package in R to detect whether words are likely misspelled."
  },
  {
    "objectID": "homework/07-strings.html#splitting-poems-into-lines-1",
    "href": "homework/07-strings.html#splitting-poems-into-lines-1",
    "title": "String Processing and Data Wrangling in R and Python",
    "section": "2.1 Splitting Poems into Lines",
    "text": "2.1 Splitting Poems into Lines\nSplit the poem into lines and create a data frame that has\n\na new column called poem_id, numbered from one to the total number of poems by the poet in question\na new variable called line that contains the text of each line of the poem (one row per poem line). To get this, you may need to split the comment string by the endline character (\\n) and then unnest or expand your data frame.\na new variable called line_no that contains the line number of the poem. This should be computed per poem.\n\nEnsure that you are splitting lines by a string which makes sense. Some poems have multiple paragraphs (stanzas) and may have a blank line in between; you want to preserve this blank line as it will help you make sense of the poem. Some poems instead have blank lines between every line of the poem; in these cases, you may want to split by e.g. \\n\\n instead of \\n. See Part 1 Checkpoint for an example of what the output should look like from each poet."
  },
  {
    "objectID": "homework/07-strings.html#summarizing-poems-1",
    "href": "homework/07-strings.html#summarizing-poems-1",
    "title": "String Processing and Data Wrangling in R and Python",
    "section": "2.2 Summarizing Poems",
    "text": "2.2 Summarizing Poems\nFor each poem, create a summary data frame that contains:\n\nAverage number of words per line in the poem\nNumber of lines in the poem\nNumber of characters which are not letters or spaces (punctuation, numbers, and any non-ASCII characters)\nNumber of uppercase letters in the poem\nNumber of lowercase letters in the poem\n\nCreate a plot showing the distribution of the number of words per line across all poems you have in your dataset. Create another plot showing the number of lines in the poem for all poems in your dataset. What does this tell you about the “average” style of the poet in question?"
  },
  {
    "objectID": "homework/07-strings.html#poetry-analysis-1",
    "href": "homework/07-strings.html#poetry-analysis-1",
    "title": "String Processing and Data Wrangling in R and Python",
    "section": "2.3 Poetry Analysis",
    "text": "2.3 Poetry Analysis\nChoose some characteristic(s) of the poet’s style to explore graphically. If necessary, create a subset of the data with poems relevant to your question before you generate numerical summaries. You may want to clean up the data and remove lines which contain quotes (e.g. start with a &gt; character) or horizontal lines in reddit markdown (e.g. only have ----).\nSome ideas to get you started thinking:\n\nNumber of syllables per line may be used to infer rhyming scheme and/or poetry style. You can use the syllables python package. You may need to use a for-loop or program a custom function to use the syllables function on every entry in your data frame column.\nUse of non-alphabetic characters. Schnoodle often uses emoji and other text annotations to convey emotions and excitement - how often do these types of annotations appear in their poems?\nCommon characters and phrases. Sprog writes poems frequently about a character named Timmy (who often meets a horrible end). Do these poems have a common format/style/rhyme scheme?\nSprog often writes longer poems with multiple stanzas. Identify which poems have multiple stanzas (Hint, look for blank lines in a systematic pattern) and show the distribution of stanza length, stanza variation within poems, and number of stanzas in each poem.\nSchnoodle often misspells words intentionally (using e.g. fren instead of friend) to convey that they are writing using an animal’s voice. What proportion of words are misspelled in each poem? How much does this proportion vary? Based on the distribution, how likely is it, in your opinion, that Schnoodle misspells words more often when speaking as one type of animal than another? You can use one of the python packages discussed in this post to detect whether words are likely misspelled."
  },
  {
    "objectID": "homework/09-join.html",
    "href": "homework/09-join.html",
    "title": "Homework 8: Joins and Summaries",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom.\nThis week, you’ll be using table joins to solve a murder mystery."
  },
  {
    "objectID": "homework/09-join.html#r",
    "href": "homework/09-join.html#r",
    "title": "Homework 8: Joins and Summaries",
    "section": "R",
    "text": "R\n\n# you can do the assignment using the database, if you want, \n# or you can use the code below to read in each table separately.\nlibrary(RSQLite)\nlibrary(DBI)\n# Your database connection code goes here. Store the connection as con \ncon &lt;- dbConnect(RSQLite::SQLite(), \"sql-murder-mystery.db\")\n# close the connection when you're done\ndbDisconnect(con)\n\n\n# This loads all of the tables into R data frame objects. \n# You can also just use the database connection above.\n# You don't need to understand what this code does to run it :)\nif (!\"purrr\" %in% installed.packages()) {\n  install.packages(\"purrr\")\n}\n# Load all tables from CSV\ntable_names &lt;- c(\"crime_scene_report\", \n                 \"drivers_license\", \n                 \"facebook_event_checkin\",\n                 \"get_fit_now_check_in\", \n                 \"get_fit_now_member\", \n                 \"income\", \n                 \"interview\",\n                 \"person\")\nurl_base &lt;- \"https://raw.githubusercontent.com/srvanderplas/datasets/main/raw/sql-murder/\"\n# For each table name, read the tables in and store them as the name of the table\npurrr::walk(table_names, function(x) {\n  assign(x, readr::read_csv(paste0(url_base, x, \".csv\")), envir = .GlobalEnv)\n})"
  },
  {
    "objectID": "homework/09-join.html#python",
    "href": "homework/09-join.html#python",
    "title": "Homework 8: Joins and Summaries",
    "section": "Python",
    "text": "Python\n\nimport pandas as pd\nimport sqlite3\n# Read sqlite query results into a pandas DataFrame\ncon = sqlite3.connect(\"sql-murder-mystery.db\")\ncrime_scene_report = pd.read_sql_query(\"SELECT * from crime_scene_report\", con)\ndrivers_license = pd.read_sql_query(\"SELECT * from drivers_license\", con)\nfacebook_event_checkin = pd.read_sql_query(\"SELECT * from facebook_event_checkin\", con)\nget_fit_now_check_in = pd.read_sql_query(\"SELECT * from get_fit_now_check_in\", con)\nget_fit_now_member = pd.read_sql_query(\"SELECT * from get_fit_now_member\", con)\nincome = pd.read_sql_query(\"SELECT * from income\", con)\ninterview = pd.read_sql_query(\"SELECT * from interview\", con)\nperson = pd.read_sql_query(\"SELECT * from person\", con)\n# Verify that result of SQL query is stored in the dataframe\nprint(crime_scene_report.head())\ncon.close()"
  },
  {
    "objectID": "homework/09-join.html#getting-started",
    "href": "homework/09-join.html#getting-started",
    "title": "Homework 8: Joins and Summaries",
    "section": "Getting Started",
    "text": "Getting Started\nTo get you started, I’ll set you up in the right place.\n\nA crime has taken place and the detective needs your help. The detective gave you the crime scene report, but you somehow lost it. You vaguely remember that the crime was a murder that occurred sometime on Jan.15, 2018 and that it took place in SQL City. Start by retrieving the corresponding crime scene report from the police department’s database.\n\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr)\n\ncrime_of_interest &lt;- crime_scene_report %&gt;%\n  filter(date == \"20180115\", city == \"SQL City\", type == \"murder\")\ncrime_of_interest$description\n\n[1] \"Security footage shows that there were 2 witnesses. The first witness lives at the last house on \\\"Northwestern Dr\\\". The second witness, named Annabel, lives somewhere on \\\"Franklin Ave\\\".\""
  },
  {
    "objectID": "homework/11-functional-prog.html",
    "href": "homework/11-functional-prog.html",
    "title": "Functional Programming: Cats and Dogs",
    "section": "",
    "text": "Note: This assignment must be submitted in github classroom."
  },
  {
    "objectID": "homework/11-functional-prog.html#r---animal-change-this-to-match",
    "href": "homework/11-functional-prog.html#r---animal-change-this-to-match",
    "title": "Functional Programming: Cats and Dogs",
    "section": "2.1 R - Animal (change this to match)",
    "text": "2.1 R - Animal (change this to match)"
  },
  {
    "objectID": "homework/11-functional-prog.html#python---animal-change-this-to-match",
    "href": "homework/11-functional-prog.html#python---animal-change-this-to-match",
    "title": "Functional Programming: Cats and Dogs",
    "section": "2.2 Python - Animal (change this to match)",
    "text": "2.2 Python - Animal (change this to match)"
  },
  {
    "objectID": "homework/15-project-peer-review.html",
    "href": "homework/15-project-peer-review.html",
    "title": "Project Peer Reviews",
    "section": "",
    "text": "To complete this assignment, you will need to follow the instructions for completing a peer review with a rubric on Canvas\nYou must peer review all of the assigned videos to get credit for this assignment."
  },
  {
    "objectID": "project/index.html",
    "href": "project/index.html",
    "title": "Project: Screencast",
    "section": "",
    "text": "Project Description\nFor your final project (which will take the place of the final exam), you will be recording a screencast in the style of David Robinson’s TidyTuesday screencasts.\nYou can find time-stamped, catalogued versions of some of David Robinson’s screencasts here.\nRequirements:\n\nYour screencast should be approximately 45 minutes long.\nYour screencast should show your analysis of a TidyTuesday dataset from 2023\nYou should showcase at least 4 different techniques you’ve learned in Stat 251. Some examples include:\n\ndata cleaning (dplyr) verbs\nreshaping data (tidyr)\nworking with dates and times (lubridate)\nworking with strings (stringr)\nwriting functions to modularize your code\nvisualizing your data effectively\n\n\nUnlike David Robinson’s screencasts, you will write a rough pseudocode “script” before you start recording. This will give you a rough outline of how to do the analysis and what things you intend to cover.\nYour goal is to help a future Stat 251 student understand some of the topics covered in this class. So while David Robinson and others who record their screencasts live might not fully explain what he’s doing, you should take the time to explain each technique you decide to use in a way that will help someone else understand.\nThere will be three deliverables for this project:\n\nPlan your dataset and topics\nPseudocode script uploaded to github repository\nScreencast + github repository\n\nScreencast uploaded to YouTube/YuJa\nApproximate time index provided for each of the 4 techniques you’re demonstrating (examples)\nCode uploaded to github repository\n\n\nIn lieu of the final exam, you will peer review two classmates’ screencasts."
  },
  {
    "objectID": "project/screencast-checklist.html",
    "href": "project/screencast-checklist.html",
    "title": "Screencast Checklist",
    "section": "",
    "text": "Screencast uploaded to YouTube/YuJa\n\nIf on YouTube, your screencast should be set so that anyone with the link can view the video.\n\nApproximate time index provided for each of the 4 techniques you’re demonstrating (examples) provided\n\nin the README of your github repository\nin the description of your video (if on YouTube)\n\nCommented code for your screencast uploaded to the github repository"
  },
  {
    "objectID": "slides/02-version-control.html",
    "href": "slides/02-version-control.html",
    "title": "Version Control",
    "section": "",
    "text": "Version control is the answer to this file naming problem.Image Source “Piled Higher and Deeper” by Jorge Cham www.phdcomics.com\n\n\n\n\nIn a system terminal, run…\n\ngit config --global user.name 'YOUR NAME HERE'\ngit config --global user.email 'YOUR EMAIL HERE'\ngit config --global --list # check to see it worked\n\n\n\n\nInstructions\n\n\n\n\n\n(Demo)\n\n\n\n(Demo)"
  },
  {
    "objectID": "slides/02-version-control.html#introduce-yourself-to-git",
    "href": "slides/02-version-control.html#introduce-yourself-to-git",
    "title": "Version Control",
    "section": "",
    "text": "In a system terminal, run…\n\ngit config --global user.name 'YOUR NAME HERE'\ngit config --global user.email 'YOUR EMAIL HERE'\ngit config --global --list # check to see it worked"
  },
  {
    "objectID": "slides/02-version-control.html#connect-git-and-r",
    "href": "slides/02-version-control.html#connect-git-and-r",
    "title": "Version Control",
    "section": "",
    "text": "Instructions"
  },
  {
    "objectID": "slides/02-version-control.html#navigating-around-github",
    "href": "slides/02-version-control.html#navigating-around-github",
    "title": "Version Control",
    "section": "",
    "text": "(Demo)"
  },
  {
    "objectID": "slides/02-version-control.html#using-rstudio-and-git",
    "href": "slides/02-version-control.html#using-rstudio-and-git",
    "title": "Version Control",
    "section": "",
    "text": "(Demo)"
  },
  {
    "objectID": "slides/02b-review-topics.html#last-class",
    "href": "slides/02b-review-topics.html#last-class",
    "title": "Programming Review",
    "section": "Last Class",
    "text": "Last Class\n\nWorked on Homework #2\nIdentified several useful functions and packages:\n\npackages/libraries\n\nin R: stringr, stringi\nin python: re\n\nfunctions\n\nin R: tolower, stri_reverse, stri_sub_all\nin python: .lower(), [::-1], re.sub\n\n\nIf you made at least one submission to github, you have some points for homework #2 in Canvas"
  },
  {
    "objectID": "slides/09a-strings.html#working-with-regular-expressions",
    "href": "slides/09a-strings.html#working-with-regular-expressions",
    "title": "Working with Strings",
    "section": "Working with regular expressions",
    "text": "Working with regular expressions\nstr_view in stringr package (in R) shows all matches:\n\nstringr::str_view(\"&gt; Poem for a Friend. \", pattern = \"\\\\W\")\n\n[1] │ &lt;&gt;&gt;&lt; &gt;Poem&lt; &gt;for&lt; &gt;a&lt; &gt;Friend&lt;.&gt;&lt; &gt;\n\nstringr::str_view(\"&gt; Poem for a Friend. \", pattern = \"\\\\b\")\n\n[1] │ &gt; &lt;&gt;Poem&lt;&gt; &lt;&gt;for&lt;&gt; &lt;&gt;a&lt;&gt; &lt;&gt;Friend&lt;&gt;. \n\n\nstr_count counts all matches in R:\n\nstringr::str_count(\"&gt; Poem for a Friend. \", pattern = \"\\\\b\")/2\n\n[1] 4\n\n\nfind_all and len count all matches in python:\n\nimport re\nres = re.findall(\"\\\\b\", \"&gt; Poem for a Friend. \")\nlen(res)/2\n\n4.0"
  },
  {
    "objectID": "slides/09a-strings.html#logistics",
    "href": "slides/09a-strings.html#logistics",
    "title": "Working with Strings",
    "section": "Logistics",
    "text": "Logistics\n\nthis week: reading quizzes (just submitted)\nwork on homework #7: string operations using reddit poetry :)\nsubmit any changes to homework #1 - #5 by Thursday"
  },
  {
    "objectID": "slides/09a-strings.html#homework-7",
    "href": "slides/09a-strings.html#homework-7",
    "title": "Working with Strings",
    "section": "Homework 7",
    "text": "Homework 7\nReddit poets: sprog and schnoodledoodledoo\nFull points for completion in ONE language"
  },
  {
    "objectID": "slides/09a-strings.html#an-example",
    "href": "slides/09a-strings.html#an-example",
    "title": "Working with Strings",
    "section": "An Example",
    "text": "An Example\nReddit OneOrangeBraincell\nIn the comments:\nComment byu/Falom from discussion inOneOrangeBraincell"
  },
  {
    "objectID": "slides/09a-strings.html#major-string-operations",
    "href": "slides/09a-strings.html#major-string-operations",
    "title": "Working with Strings",
    "section": "Major String Operations",
    "text": "Major String Operations\n\n\n\n\n\n\n\nOperation\nSketch\n\n\n\n\nFind and replace (or remove)\n\n\n\nSplit data into multiple columns\n\n\n\nJoin data into a single column"
  },
  {
    "objectID": "slides/10-projects.html#project-overview",
    "href": "slides/10-projects.html#project-overview",
    "title": "Projects",
    "section": "Project Overview",
    "text": "Project Overview\n\n\n\nCreate a TidyTuesday style screencast\nExamples: https://www.rscreencasts.com/\nAnalyze a TidyTuesday dataset from the last year using R or Python\nApproximately 45 minutes long\nShow at least 4 different techniques you learned in Stat 251 this semester\n\n\n\n\nGH link"
  },
  {
    "objectID": "slides/10-projects.html#part-1---planning",
    "href": "slides/10-projects.html#part-1---planning",
    "title": "Projects",
    "section": "Part 1 - Planning",
    "text": "Part 1 - Planning\nWork: In class, April 15 (Tuesday)\nDue: April 15, 11:59pm\nTell me:\n\nWhat dataset you’re using\nWhat you’re going to investigate\nWhat Stat 251 topics you’re going to cover"
  },
  {
    "objectID": "slides/10-projects.html#part-2---script-outline",
    "href": "slides/10-projects.html#part-2---script-outline",
    "title": "Projects",
    "section": "Part 2 - Script Outline",
    "text": "Part 2 - Script Outline\nWork: In class, April 22 (Tuesday)\nDue: April 22, 11:59pm\n\nProvide a (rough) script for your screen cast\n\nExplain how the techniques work\nDiscuss any challenges you had analyzing this data\nInclude the mistakes you made along the way!\n\nInclude pseudocode/actual code for each topic\n\nDoes not have to actually work at this point"
  },
  {
    "objectID": "slides/10-projects.html#part-3---recording",
    "href": "slides/10-projects.html#part-3---recording",
    "title": "Projects",
    "section": "Part 3 - Recording",
    "text": "Part 3 - Recording\nWork: On your own\nDue: May 1, 11:59pm (Thursday)\n\nScreencast uploaded to YouTube or YuJa\nApproximate time index provided for each technique you demonstrate (on GitHub)\nFinal code file uploaded to github repository"
  },
  {
    "objectID": "slides/10-projects.html#part-4---peer-review",
    "href": "slides/10-projects.html#part-4---peer-review",
    "title": "Projects",
    "section": "Part 4 - Peer Review",
    "text": "Part 4 - Peer Review\n\nIn place of the final exam:\n\nWatch 2 screencasts\nPeer evaluations - leave a comment on Canvas\nBased on rubric (provided)\n\nTake place between May 1 and Thursday of Finals week"
  },
  {
    "objectID": "slides/10b-reshape.html#logistics",
    "href": "slides/10b-reshape.html#logistics",
    "title": "Murder tables!?",
    "section": "Logistics",
    "text": "Logistics\n\nSubmit homework 8 by midnight! Speak now with further questions or …\nFocus on homework 9: Murder in SQL City"
  },
  {
    "objectID": "slides/10b-reshape.html#homework-9",
    "href": "slides/10b-reshape.html#homework-9",
    "title": "Murder tables!?",
    "section": "Homework 9",
    "text": "Homework 9\n\nSolve a murder!"
  },
  {
    "objectID": "slides/10b-reshape.html#connection-of-homework-9-to-joins",
    "href": "slides/10b-reshape.html#connection-of-homework-9-to-joins",
    "title": "Murder tables!?",
    "section": "Connection of homework 9 to joins",
    "text": "Connection of homework 9 to joins\n\nMake sure to look at the relationship between the different data sets!\nThe first filter statement gives you enough information to start searching for witness statements.\n\n\n\nSecurity footage shows that there were 2 witnesses. The first witness lives at the last house on \"Northwestern Dr\". The second witness, named Annabel, lives somewhere on \"Franklin Ave\".\n\n\n\nEventually you will be in the situation that you need to look up information from a different table based on a key variable. Instead of using a filter with that information, merge the two tables to directly incorporate the information from the other table."
  },
  {
    "objectID": "slides/12a-screencast.html",
    "href": "slides/12a-screencast.html",
    "title": "Screencast - edited script",
    "section": "",
    "text": "For the screencast itself, check the canvas course for the zoom recording for April 15.\nThis script originated as the code from the screencast during class, and was edited for clarity afterwards. The figure captions were similarly added afterwards.\n\npixar_films &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-03-11/pixar_films.csv')\npublic_response &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-03-11/public_response.csv')\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(tidyr)\nlibrary(lubridate)\nknitr::opts_chunk$set(warning = FALSE, message = FALSE)"
  },
  {
    "objectID": "slides/12a-screencast.html#overall-there-are-a-few-strange-things-going-on-with-respect-to-missing-values",
    "href": "slides/12a-screencast.html#overall-there-are-a-few-strange-things-going-on-with-respect-to-missing-values",
    "title": "Screencast - edited script",
    "section": "Overall: there are a few strange things going on with respect to missing values",
    "text": "Overall: there are a few strange things going on with respect to missing values\n\nIt seems odd that we have a release date, but no title (movie 27)\nmissing values only in the last couple of movies (24 - 27) - it seems that some of the data was added manually, but not consistently\n\nPossible to-do item: fix the data in the pixarfilms package by updating the movie information directly from Wikipedia.\nWikipedia has information on 28 movies, titles are included, no ratings, no runtimes though\nFor now, we just move on with the analysis."
  },
  {
    "objectID": "slides/13b-functional.html#logistics",
    "href": "slides/13b-functional.html#logistics",
    "title": "Functioning Cats and Dogs",
    "section": "Logistics",
    "text": "Logistics"
  },
  {
    "objectID": "slides/13b-functional.html#feedback",
    "href": "slides/13b-functional.html#feedback",
    "title": "Functioning Cats and Dogs",
    "section": "Feedback",
    "text": "Feedback\n\nScripts: generally look good, time until Tuesday to react to feedback (make sure to submit!)\nToday: finish homework 11 (functions)\nNext week: submit the screencast (Thursday)"
  },
  {
    "objectID": "slides/13b-functional.html#script",
    "href": "slides/13b-functional.html#script",
    "title": "Functioning Cats and Dogs",
    "section": "Script",
    "text": "Script\nFor each of the Things you defined, write out at least three paragraphs:\nMake sure to:\n\ninclude definitions (i.e. how do you measure strength)\ngive context (i.e. which variables are used)\ntie ‘things’ in with the topics in the class"
  },
  {
    "objectID": "slides/13b-functional.html#homework-11",
    "href": "slides/13b-functional.html#homework-11",
    "title": "Functioning Cats and Dogs",
    "section": "Homework 11",
    "text": "Homework 11"
  },
  {
    "objectID": "slides/13b-functional.html#list-objects",
    "href": "slides/13b-functional.html#list-objects",
    "title": "Functioning Cats and Dogs",
    "section": "List objects",
    "text": "List objects\nmost general form of structured data\nin R:\n\nlo_r &lt;- list(name=\"value\", numbers=c(1, 2, 3, 4, 5), other_lists = list(a = 1, b = 2, c = \"XYZ\"))\n\nin python, lists are base objects, dictionaries include names, come together as Series:\n\nlo_py_noname = [\"value\", [1, 2, 3, 4, 5], [1, 2, \"XYZ\"]]\n\nlo_py = dict('name':\"value\", 'numbers':[1, 2, 3, 4, 5], 'other_lists': {'a': 1, 'b': 2, 'c': \"XYZ\"})\n\nimport pandas as pd\nlo_py_series = pd.Series(lo_py)\n\ninvalid syntax (&lt;string&gt;, line 3)"
  },
  {
    "objectID": "slides/13b-functional.html#accessing-parts",
    "href": "slides/13b-functional.html#accessing-parts",
    "title": "Functioning Cats and Dogs",
    "section": "Accessing parts",
    "text": "Accessing parts\naccess by index or by name\n\n# return list \nlo_r[1] \n\n$name\n[1] \"value\"\n\nlo_r['name']\n\n$name\n[1] \"value\"\n\n# return list element\nlo_r[[1]] \n\n[1] \"value\"\n\nlo_r$name\n\n[1] \"value\"\n\n\nin python: access by index (list), access by name (dictionary), either (series)"
  },
  {
    "objectID": "slides/13b-functional.html#working-with-json-format",
    "href": "slides/13b-functional.html#working-with-json-format",
    "title": "Functioning Cats and Dogs",
    "section": "Working with JSON format",
    "text": "Working with JSON format\nJSON is list data format: each record is a set of key-value pairs, a value can consist of another list.\n{ 'id': 71418862, 'organization_id': 'NE159', 'url': 'https://...',\n'type': 'Dog', 'species': 'Dog', 'breeds': {'primary': 'Black Labrador Retriever', 'mixed': False, 'unknown': False}, 'colors': {'primary': 'Black'}, 'age': 'Baby', 'gender': 'Male', 'size': 'Medium', 'coat': 'Short', 'attributes': {'spayed_neutered': True, 'house_trained': True, 'special_needs': False, 'shots_current': True}, 'environment': {'children': True, 'dogs': True, 'cats': True}, 'tags': ['Couch potato', 'Curious', 'Affectionate', 'Friendly', 'Brave', 'Loyal', 'Gentle', 'Playful', 'Smart', 'Athletic', 'Funny', 'Independent', 'Loves Kisses', 'Protective', 'Dignified', 'Quiet'], 'name': 'Jalepeno', 'description': 'Jalepeno is all boy and ready to play and learn everything that you want to teach him. He is amazing...', 'photos': [{'small': 'https://...', 'medium': 'https://...', 'large': 'https://...', 'full': 'https://...'}], 'primary_photo_cropped': {'small': 'https://...', 'medium': 'https://...', 'large': 'https://...', 'full': 'https://...'}, 'videos': [], 'status': 'adoptable', 'status_changed_at': '2024-04-22T04:53:28+0000', 'published_at': '2024-04-22T04:53:27+0000', 'distance': 38.6862, 'contact': {'email': 'maws_paws@yahoo.com', 'phone': '(402) 806-1441', 'address': {'city': 'Beatrice', 'state': 'NE', 'postcode': '68310', 'country': 'US'}}, '_links': {'self': {'href': '/v2/animals/71418862'}, 'type': {'href': '/v2/types/dog'}, 'organization': {'href': '/v2/organizations/ne159'}}}"
  },
  {
    "objectID": "exam/data-earthquakes/index.html",
    "href": "exam/data-earthquakes/index.html",
    "title": "Midterm",
    "section": "",
    "text": "The United States Geological Survey (USGS) continuously monitors earth quakes and makes the information available to the public in a data feed. The dataset all-month.csv included in this repository was pulled from USGS on Monday Mar 3, 2025. It contains all worldwide earth quakes for the last 30 days.\nAn detailed description of all the variables in the all_month data (and more) is available from in the ComCat Documentation\nFor all of the following questions, provide answers and include your code. You can work in R or in python or in a mix of the two. Make sure that the final document you submit renders without errors. In the rendered document avoid any lengthy output.\n\nLoad the data into the object eq using R or python. Make sure that you are working with an object with 9815 rows and 22 columns.\n\n\n# code chunk for R\n\n\n# python code chunk\n\n\nRead the ComCat Documentation for the variables time, latitude, longitude, depth, mag, magType, nst, id, and place. Ensure that the format of the variables matches the description.\n\nIf you work on R, use the lubridate package to convert the variable time to a time object. If you work in python, use the datetime package.\n\n# R chunk\nlibrary(lubridate)\n\n\n# python chunk\nimport datetime\n\n\nInclude each of the variables time, latitude, longitude, depth, mag, magType, and nst in a data chart. Summarise the main finding(s) in each chart in 1-2 sentences.\n\n\nWhat is the time frame under consideration? How many earthquakes were there (show that the number of earthquakes is equal to the number of rows in the dataset)? When and where was the strongest earthquake? What was its magnitude?\n\n\ndepth is an estimate (in kilometers) of the depth in which an earthquake begins to rupture. The documentation suggests that in some cases default depths are used (when there is no further information available). Based on chart(s), argue which values are used for default depths and where?\n\n\nThe variable nst contains the information on the number of seismic stations used to determine an earthquake’s location.\n\n\nWhat is the average number of seismic stations used to determine the location of an earthquake?\nWhat is the minimum number of stations?\n1,592 earthquakes do not have a recorded number of stations. What else do these earthquakes have in common?\n\n\nBy introducing a suitable grouping variable, create a data set daily_summary that contains the daily summary values of the following statistics:\n\n\nthe total number of earthquakes\nthe number of earthquakes with a magnitude of 4 or higher\nthe average magnitude of earthquakes\nthe location, place and magnitude of the strongest earthquake\n\nBased on the values in daily_summary discuss the statements: On average, there are about 50 earthquakes globally with a magnitude of at least 4, days with more than 750 seismic events are not uncommon.\n\n“The Ring of fire” is a horseshoe-shaped belt along the rim of the Pacific (tectonic) Plate reaching from New Zealand to the tip of South America. The Ring of Fire contains hundreds of active and dormant volcanoes and is the location of a lot of seismic activity.\nIntroduce a transformation of the longitude variable longitude_rof to the data set that allows you to visualize the horseshoe shape of the ring of fire. (draw that chart)\n\n\nUpdate the data set: write a function update_eq with arguments data, url and verbose that downloads the most recent 30 days of earthquake activity and incorporates that information into the provided data set data. Make sure to include each earthquake only once (in case there are multiple, choose the most recent update given by updated). If verbose is set to true, provide a summary of the changes made to the data set of the form (replace the stars by the corresponding numbers):\nnumber of earthquakes added: ***\nnumber of earthquakes updated: ***\n\nCall your function with the eq object set as the data, a url of https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_month.csv in the verbose mode. Save the resulting data set as all_month_updated.csv. Include the function, the call to your function and the updated file in your repository."
  }
]